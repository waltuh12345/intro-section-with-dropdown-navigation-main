{
  "version": 3,
  "sources": ["../../src/support/utils/array.ts", "../../src/support/dom/style.ts", "../../src/support/cache.ts", "../../src/support/compatibility/server.ts", "../../src/support/utils/types.ts", "../../src/support/utils/object.ts", "../../src/support/dom/attribute.ts", "../../src/support/dom/traversal.ts", "../../src/support/dom/manipulation.ts", "../../src/support/dom/create.ts", "../../src/support/compatibility/vendors.ts", "../../src/support/compatibility/apis.ts", "../../src/support/dom/class.ts", "../../src/support/utils/animation.ts", "../../src/support/utils/equal.ts", "../../src/support/utils/function.ts", "../../src/support/dom/dimensions.ts", "../../src/support/dom/events.ts", "../../src/support/dom/offset.ts", "../../src/support/eventListeners.ts", "../../src/options.ts", "../../src/classnames.ts", "../../src/plugins/plugins.ts", "../../src/plugins/optionsValidationPlugin/validation.ts", "../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts", "../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts", "../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts", "../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts", "../../src/environment.ts", "../../src/initialization.ts", "../../src/instances.ts", "../../src/setups/setups.ts", "../../src/setups/structureSetup/structureSetup.elements.ts", "../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts", "../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts", "../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts", "../../src/setups/structureSetup/structureSetup.update.ts", "../../src/observers/domObserver.ts", "../../src/observers/sizeObserver.ts", "../../src/observers/trinsicObserver.ts", "../../src/setups/structureSetup/structureSetup.observers.ts", "../../src/setups/structureSetup/structureSetup.ts", "../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts", "../../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts", "../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts", "../../src/setups/scrollbarsSetup/scrollbarsSetup.ts", "../../src/overlayscrollbars.ts"],
  "sourcesContent": ["import { isArrayLike, isString } from '~/support/utils/types';\nimport type { PlainObject } from '~/typings';\n\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\n\n/**\n * Iterates through a array or object\n * @param arrayLikeOrObject The array or object through which shall be iterated.\n * @param callback The function which is responsible for the iteration.\n * If the function returns true its treated like a \"continue\" statement.\n * If the function returns false its treated like a \"break\" statement.\n */\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T>,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\n): Array<T> | ReadonlyArray<T>;\nexport function each<T>(\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T>,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\n): ArrayLike<T>;\nexport function each<T>(\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\n): ArrayLike<T> | false | null | undefined;\nexport function each(\n  obj: PlainObject,\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\n): PlainObject;\nexport function each(\n  obj: PlainObject | false | null | undefined,\n  callback: (value: any, indexOrKey: string, source: PlainObject) => boolean | unknown\n): PlainObject | false | null | undefined;\nexport function each<T>(\n  source: Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined,\n  callback: (value: T, indexOrKey: any, source: any) => boolean | unknown\n): Array<T> | ArrayLike<T> | ReadonlyArray<T> | PlainObject | false | null | undefined {\n  if (isArrayLike(source)) {\n    for (let i = 0; i < source.length; i++) {\n      if (callback(source[i], i, source) === false) {\n        break;\n      }\n    }\n  } else if (source) {\n    // cant use support func keys here due to circular dep\n    each(Object.keys(source), (key) => callback(source[key], key, source));\n  }\n  return source;\n}\n\n/**\n * Returns the index of the given inside the given array or -1 if the given item isn't part of the given array.\n * @param arr The array.\n * @param item The item.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n */\nexport const indexOf = <T = any>(arr: T[], item: T, fromIndex?: number): number =>\n  arr.indexOf(item, fromIndex);\n\n/**\n * Pushesh all given items into the given array and returns it.\n * @param array The array the items shall be pushed into.\n * @param items The items which shall be pushed into the array.\n */\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\n    ? Array.prototype.push.apply(array, items as T[])\n    : array.push(items as T);\n  return array;\n};\n\n/**\n * Creates a shallow-copied Array instance from an array-like or iterable object.\n * @param arr The object from which the array instance shall be created.\n */\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\n  const original = Array.from;\n  const result: T[] = [];\n\n  if (original && arr) {\n    return original(arr);\n  }\n\n  if (arr instanceof Set) {\n    arr.forEach((value) => {\n      push(result, value);\n    });\n  } else {\n    each(arr, (elm) => {\n      push(result, elm);\n    });\n  }\n\n  return result;\n};\n\n/**\n * Check whether the passed array is empty.\n * @param array The array which shall be checked.\n */\nexport const isEmptyArray = (array: any[] | null | undefined): boolean =>\n  !!array && array.length === 0;\n\n/**\n * Calls all functions in the passed array/set of functions.\n * @param arr The array filled with function which shall be called.\n * @param args The args with which each function is called.\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\n */\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\n  // eslint-disable-next-line prefer-spread\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\n  each(arr, runFn);\n  !keep && ((arr as any[]).length = 0);\n};\n", "import { each, keys } from '~/support/utils';\nimport { isString, isNumber, isArray, isUndefined } from '~/support/utils/types';\nimport type { PlainObject, StyleObject } from '~/typings';\n\nexport interface TRBL {\n  t: number;\n  r: number;\n  b: number;\n  l: number;\n}\n\nconst cssNumber = {\n  // animationiterationcount: 1,\n  // columncount: 1,\n  // fillopacity: 1,\n  // flexgrow: 1,\n  // flexshrink: 1,\n  // fontweight: 1,\n  // lineheight: 1,\n  // order: 1,\n  // orphans: 1,\n  // widows: 1,\n  // zoom: 1,\n  opacity: 1,\n  zindex: 1,\n};\n\nconst parseToZeroOrNumber = (value: string, toFloat?: boolean): number => {\n  /* istanbul ignore next */\n  const num = toFloat ? parseFloat(value) : parseInt(value, 10);\n  // num === num means num is not NaN\n  /* istanbul ignore next */\n  return num === num ? num : 0; // eslint-disable-line no-self-compare\n};\n\nconst adaptCSSVal = (prop: string, val: string | number): string | number =>\n  !cssNumber[prop.toLowerCase()] && isNumber(val) ? `${val}px` : val;\n\nconst getCSSVal = (elm: HTMLElement, computedStyle: CSSStyleDeclaration, prop: string): string =>\n  /* istanbul ignore next */\n  computedStyle != null\n    ? computedStyle[prop] || computedStyle.getPropertyValue(prop)\n    : elm.style[prop];\n\nconst setCSSVal = (elm: HTMLElement, prop: string, val: string | number): void => {\n  try {\n    const { style: elmStyle } = elm;\n    if (!isUndefined(elmStyle[prop])) {\n      elmStyle[prop] = adaptCSSVal(prop, val);\n    } else {\n      elmStyle.setProperty(prop, val as string);\n    }\n  } catch (e) {}\n};\n\n/**\n * Gets or sets the passed styles to the passed element.\n * @param elm The element to which the styles shall be applied to / be read from.\n * @param styles The styles which shall be set or read.\n */\nexport function style<CustomCssProps>(\n  elm: HTMLElement | false | null | undefined,\n  styles: StyleObject<CustomCssProps>\n): void;\nexport function style(elm: HTMLElement | false | null | undefined, styles: string): string;\nexport function style(\n  elm: HTMLElement | false | null | undefined,\n  styles: Array<string> | string\n): { [key: string]: string };\nexport function style<CustomCssProps>(\n  elm: HTMLElement | false | null | undefined,\n  styles: StyleObject<CustomCssProps> | Array<string> | string\n): { [key: string]: string } | string | void {\n  const getSingleStyle = isString(styles);\n  const getStyles = isArray(styles) || getSingleStyle;\n\n  if (getStyles) {\n    let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\n    if (elm) {\n      const computedStyle: CSSStyleDeclaration = window.getComputedStyle(elm, null);\n      getStylesResult = getSingleStyle\n        ? getCSSVal(elm, computedStyle, styles as string)\n        : (styles as Array<string>).reduce((result, key) => {\n            result[key] = getCSSVal(elm, computedStyle, key as string);\n            return result;\n          }, getStylesResult);\n    }\n    return getStylesResult;\n  }\n  elm && each(keys(styles), (key) => setCSSVal(elm, key, styles[key]));\n}\n\nexport const directionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\n  style(elm, 'direction') === 'rtl';\n\n/**\n * Returns the top right bottom left values of the passed css property.\n * @param elm The element of which the values shall be returned.\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\n * @param propertySuffix The css property suffix. (e.g. \"width\")\n */\nexport const topRightBottomLeft = (\n  elm?: HTMLElement | false | null | undefined,\n  propertyPrefix?: string,\n  propertySuffix?: string\n): TRBL => {\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\n  const top = `${finalPrefix}top${finalSuffix}`;\n  const right = `${finalPrefix}right${finalSuffix}`;\n  const bottom = `${finalPrefix}bottom${finalSuffix}`;\n  const left = `${finalPrefix}left${finalSuffix}`;\n  const result = style(elm, [top, right, bottom, left]);\n  return {\n    t: parseToZeroOrNumber(result[top], true),\n    r: parseToZeroOrNumber(result[right], true),\n    b: parseToZeroOrNumber(result[bottom], true),\n    l: parseToZeroOrNumber(result[left], true),\n  };\n};\n", "export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n", "export const isClient = () => typeof window !== 'undefined';\n", "import { isClient } from '~/support/compatibility/server';\nimport type { PlainObject } from '~/typings';\n\nconst ElementNodeType = isClient() && Node.ELEMENT_NODE;\nconst { toString, hasOwnProperty } = Object.prototype;\n\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\n\nexport const isNull = (obj: any): obj is null => obj === null;\n\nexport const type = (obj: any): string =>\n  isUndefined(obj) || isNull(obj)\n    ? `${obj}`\n    : toString\n        .call(obj)\n        .replace(/^\\[object (.+)\\]$/, '$1')\n        .toLowerCase();\n\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\n\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\n\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\n\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\n\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\n\nexport const isObject = (obj: any): boolean =>\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\n\n/**\n * Returns true if the given object is array like, false otherwise.\n * @param obj The Object\n */\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\n  const length = !!obj && obj.length;\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\n\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\n    ? length > 0 && isObject(obj)\n      ? length - 1 in obj\n      : true\n    : false;\n};\n\n/**\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\n * @param obj The Object.\n */\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\n\n  let key;\n  const cstr = 'constructor';\n  const ctor = obj[cstr];\n  const ctorProto = ctor && ctor.prototype;\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\n\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\n    return false;\n  }\n\n  /* eslint-disable no-restricted-syntax */\n  for (key in obj) {\n    /**/\n  }\n  /* eslint-enable */\n\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\n};\n\n/**\n * Checks whether the given object is a HTMLElement.\n * @param obj The object which shall be checked.\n */\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\n  const instanceofObj = HTMLElement;\n  return obj\n    ? instanceofObj\n      ? obj instanceof instanceofObj\n      : obj.nodeType === ElementNodeType\n    : false;\n};\n\n/**\n * Checks whether the given object is a Element.\n * @param obj The object which shall be checked.\n */\nexport const isElement = (obj: any): obj is Element => {\n  const instanceofObj = Element;\n  return obj\n    ? instanceofObj\n      ? obj instanceof instanceofObj\n      : obj.nodeType === ElementNodeType\n    : false;\n};\n", "import { isArray, isFunction, isPlainObject, isNull } from '~/support/utils/types';\nimport { each } from '~/support/utils/array';\n\n/**\n * Determines whether the passed object has a property with the passed name.\n * @param obj The object.\n * @param prop The name of the property.\n */\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, prop);\n\n/**\n * Returns the names of the enumerable string properties and methods of an object.\n * @param obj The object of which the properties shall be returned.\n */\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\n\ntype AssignDeep = {\n  <T, U>(target: T, object1: U): T & U;\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\n    U &\n    V &\n    W &\n    X &\n    Y;\n  <T, U, V, W, X, Y, Z>(\n    target: T,\n    object1?: U,\n    object2?: V,\n    object3?: W,\n    object4?: X,\n    object5?: Y,\n    object6?: Z\n  ): T & U & V & W & X & Y & Z;\n};\n\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\n  target: T,\n  object1?: U,\n  object2?: V,\n  object3?: W,\n  object4?: X,\n  object5?: Y,\n  object6?: Z\n): T & U & V & W & X & Y & Z => {\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\n    target = {} as T;\n  }\n\n  each(sources, (source) => {\n    // Extend the base object\n    each(keys(source), (key) => {\n      const copy: any = source[key];\n\n      // Prevent Object.prototype pollution\n      // Prevent never-ending loop\n      if (target === copy) {\n        return true;\n      }\n\n      const copyIsArray = isArray(copy);\n\n      // Recurse if we're merging plain objects or arrays\n      if (copy && (isPlainObject(copy) || copyIsArray)) {\n        const src = target[key];\n        let clone: any = src;\n\n        // Ensure proper type for the source value\n        if (copyIsArray && !isArray(src)) {\n          clone = [];\n        } else if (!copyIsArray && !isPlainObject(src)) {\n          clone = {};\n        }\n\n        // Never move original objects, clone them\n        target[key] = assignDeep(clone, copy) as any;\n      } else {\n        target[key] = copy;\n      }\n    });\n  });\n\n  // Return the modified object\n  return target as any;\n};\n\n/**\n * Returns true if the given object is empty, false otherwise.\n * @param obj The Object.\n */\nexport const isEmptyObject = (obj: any): boolean => {\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\n  for (const name in obj) return false;\n  return true;\n  /* eslint-enable */\n};\n", "import { from } from '~/support/utils/array';\nimport { isNumber, isString, isUndefined } from '~/support/utils/types';\n\ntype GetSetPropName = 'scrollLeft' | 'scrollTop' | 'value';\n\ntype Attr = {\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\n    | string\n    | null\n    | void;\n};\n\ntype GetSetProp<T> = {\n  (elm: HTMLElement | false | null | undefined): T;\n  (elm: HTMLElement | false | null | undefined, value: T | false | null): void;\n  (elm: HTMLElement | false | null | undefined, value?: T | false | null): T | void;\n};\n\nconst getSetProp = (\n  topLeft: GetSetPropName,\n  fallback: number | string,\n  elm: HTMLElement | HTMLInputElement | false | null | undefined,\n  value?: number | string | false | null\n): number | string | void => {\n  if (isUndefined(value)) {\n    return elm ? elm[topLeft] : fallback;\n  }\n  elm && (isString(value) || isNumber(value)) && (elm[topLeft] = value);\n};\n\n/**\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\n * Returns null if the element has no attribute with the given name.\n * @param elm The element of which the attribute shall be get or set.\n * @param attrName The attribute name which shall be get or set.\n * @param value The value of the attribute which shall be set.\n */\nexport const attr = ((\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value?: string\n): string | null | void => {\n  if (isUndefined(value)) {\n    return elm ? elm.getAttribute(attrName) : null;\n  }\n  elm && elm.setAttribute(attrName, value);\n}) as Attr;\n\n/**\n * Removes the given attribute from the given element.\n * @param elm The element of which the attribute shall be removed.\n * @param attrName The attribute name.\n */\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\n  elm && elm.removeAttribute(attrName);\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\n * @param elm The element.\n * @param attrName The attributeName to which the value shall be added or removed.\n * @param value The value which shall be added or removed.\n * @param add True if the value shall be added, false otherwise.\n */\nexport const attrClass = (\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value: string,\n  add?: boolean\n) => {\n  if (value) {\n    const currValues = attr(elm, attrName) || '';\n    const currValuesSet = new Set(currValues.split(' '));\n    currValuesSet[add ? 'add' : 'delete'](value);\n    const newTokens = from(currValuesSet).join(' ').trim();\n    attr(elm, attrName, newTokens);\n  }\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\n * @param elm The element.\n * @param attrName The attributeName from which the content shall be checked.\n * @param value The value.\n * @returns True if the given attribute has the value in it, false otherwise.\n */\nexport const hasAttrClass = (\n  elm: HTMLElement | false | null | undefined,\n  attrName: string,\n  value: string\n) => {\n  const currValues = attr(elm, attrName) || '';\n  const currValuesSet = new Set(currValues.split(' '));\n  return currValuesSet.has(value);\n};\n\n/**\n * Gets or sets the scrollLeft value of the given element depending whether the value attribute is given.\n * @param elm The element of which the scrollLeft value shall be get or set.\n * @param value The scrollLeft value which shall be set.\n */\nexport const scrollLeft = ((\n  elm: HTMLElement | false | null | undefined,\n  value?: number | false | null\n): number | void => getSetProp('scrollLeft', 0, elm, value) as number) as GetSetProp<number>;\n\n/**\n * Gets or sets the scrollTop value of the given element depending whether the value attribute is given.\n * @param elm The element of which the scrollTop value shall be get or set.\n * @param value The scrollTop value which shall be set.\n */\nexport const scrollTop = ((\n  elm: HTMLElement | false | null | undefined,\n  value?: number | false | null\n): number | void => getSetProp('scrollTop', 0, elm, value) as number) as GetSetProp<number>;\n\n/**\n * Gets or sets the value of the given input element depending whether the value attribute is given.\n * @param elm The input element of which the value shall be get or set.\n * @param value The value which shall be set.\n */\nexport const val = ((\n  elm: HTMLInputElement | false | null | undefined,\n  value?: string\n): string | void => getSetProp('value', '', elm, value) as string) as GetSetProp<string>;\n", "import { isClient } from '~/support/compatibility/server';\nimport { isElement } from '~/support/utils/types';\nimport { push, from } from '~/support/utils/array';\n\ntype InputElementType = Node | Element | Node | false | null | undefined;\ntype OutputElementType = Node | Element | null;\n\nconst getElmPrototype = (isClient() && Element.prototype) as Element; // only Element.prototype wont work on server\n\n/**\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nconst find = (selector: string, elm?: InputElementType): Element[] => {\n  const arr: Array<Element> = [];\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\n\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\n};\n\n/**\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\n  const rootElm = elm ? (isElement(elm) ? elm : null) : document;\n\n  return rootElm ? rootElm.querySelector(selector) : null;\n};\n\n/**\n * Determines whether the passed element is matching with the passed selector.\n * @param elm The element which has to be compared with the passed selector.\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\n */\nconst is = (elm: InputElementType, selector: string): boolean => {\n  if (isElement(elm)) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line\n    const fn: (...args: any) => boolean =\n      // @ts-ignore\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\n    return fn.call(elm, selector);\n  }\n  return false;\n};\n\n/**\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\n * @param elm The element of which the children shall be returned.\n * @param selector The selector which must match with the children elements.\n */\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\n  const childs: Array<Element> = [];\n\n  return isElement(elm)\n    ? push(\n        childs,\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\n      )\n    : childs;\n};\n\n/**\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\n * @param elm The element of which the childNodes shall be returned.\n */\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\n  elm ? from(elm.childNodes) : [];\n\n/**\n * Returns the parent element of the passed element, or null if the passed element is null.\n * @param elm The element of which the parent element shall be returned.\n */\nconst parent = (elm: InputElementType): OutputElementType => (elm ? elm.parentElement : null);\n\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\n  if (isElement(elm)) {\n    const closestFn = getElmPrototype.closest;\n    if (closestFn) {\n      return closestFn.call(elm, selector);\n    }\n\n    do {\n      if (is(elm, selector)) {\n        return elm as Element;\n      }\n      elm = parent(elm);\n    } while (elm);\n  }\n\n  return null;\n};\n\n/**\n * Determines whether the given element lies between two selectors in the DOM.\n * @param elm The element.\n * @param highBoundarySelector The high boundary selector.\n * @param deepBoundarySelector The deep boundary selector.\n */\nconst liesBetween = (\n  elm: InputElementType,\n  highBoundarySelector: string,\n  deepBoundarySelector: string\n): boolean => {\n  const closestHighBoundaryElm = elm && closest(elm, highBoundarySelector);\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\n  const deepBoundaryIsValid =\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\n\n  return closestHighBoundaryElm && closestDeepBoundaryElm\n    ? closestHighBoundaryElm === elm ||\n        closestDeepBoundaryElm === elm ||\n        (deepBoundaryIsValid &&\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\n            closestHighBoundaryElm)\n    : false;\n};\n\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\n", "import { isArrayLike } from '~/support/utils/types';\nimport { each, from } from '~/support/utils/array';\nimport { parent } from '~/support/dom/traversal';\n\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\n\n/**\n * Inserts Nodes before the given preferredAnchor element.\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\n * @param insertedElms The Nodes which shall be inserted.\n */\nconst before = (\n  parentElm: Node | false | null | undefined,\n  preferredAnchor: Node | false | null | undefined,\n  insertedElms: NodeCollection\n): void => {\n  if (insertedElms && parentElm) {\n    let anchor: Node | false | null | undefined = preferredAnchor;\n    let fragment: DocumentFragment | Node | null | undefined;\n\n    if (isArrayLike(insertedElms)) {\n      fragment = document.createDocumentFragment();\n\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\n      each(insertedElms, (insertedElm) => {\n        if (insertedElm === anchor) {\n          anchor = insertedElm.previousSibling;\n        }\n        fragment!.appendChild(insertedElm);\n      });\n    } else {\n      fragment = insertedElms;\n    }\n\n    // if the preferred anchor isn't null set it to a valid anchor\n    if (preferredAnchor) {\n      if (!anchor) {\n        anchor = parentElm.firstChild;\n      } else if (anchor !== preferredAnchor) {\n        anchor = anchor.nextSibling;\n      }\n    }\n\n    parentElm.insertBefore(fragment, anchor || null);\n  }\n};\n\n/**\n * Appends the given children at the end of the given Node.\n * @param node The Node to which the children shall be appended.\n * @param children The Nodes which shall be appended.\n */\nexport const appendChildren = (\n  node: Node | false | null | undefined,\n  children: NodeCollection\n): void => {\n  before(node, null, children);\n};\n\n/**\n * Prepends the given children at the start of the given Node.\n * @param node The Node to which the children shall be prepended.\n * @param children The Nodes which shall be prepended.\n */\nexport const prependChildren = (\n  node: Node | false | null | undefined,\n  children: NodeCollection\n): void => {\n  before(node, node && node.firstChild, children);\n};\n\n/**\n * Inserts the given Nodes before the given Node.\n * @param node The Node before which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertBefore = (\n  node: Node | false | null | undefined,\n  insertedNodes: NodeCollection\n): void => {\n  before(parent(node), node, insertedNodes);\n};\n\n/**\n * Inserts the given Nodes after the given Node.\n * @param node The Node after which the given Nodes shall be inserted.\n * @param insertedNodes The Nodes which shall be inserted.\n */\nexport const insertAfter = (\n  node: Node | false | null | undefined,\n  insertedNodes: NodeCollection\n): void => {\n  before(parent(node), node && node.nextSibling, insertedNodes);\n};\n\n/**\n * Removes the given Nodes from their parent.\n * @param nodes The Nodes which shall be removed.\n */\nexport const removeElements = (nodes: NodeCollection): void => {\n  if (isArrayLike(nodes)) {\n    each(from(nodes), (e) => removeElements(e));\n  } else if (nodes) {\n    const parentElm = parent(nodes);\n    if (parentElm) {\n      parentElm.removeChild(nodes);\n    }\n  }\n};\n", "import { each } from '~/support/utils/array';\nimport { attr } from '~/support/dom/attribute';\nimport { contents } from '~/support/dom/traversal';\nimport { removeElements } from '~/support/dom/manipulation';\n\n/**\n * Creates a div DOM node.\n */\nexport const createDiv = (classNames?: string): HTMLDivElement => {\n  const div = document.createElement('div');\n  if (classNames) {\n    attr(div, 'class', classNames);\n  }\n  return div;\n};\n\n/**\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\n * @param html The html string after which the DOM nodes shall be created.\n */\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\n  const createdDiv = createDiv();\n  createdDiv.innerHTML = html.trim();\n\n  return each(contents(createdDiv), (elm) => removeElements(elm));\n};\n", "import { each } from '~/support/utils/array';\nimport { isClient } from '~/support/compatibility/server';\nimport { hasOwnProperty } from '~/support/utils/object';\nimport { createDiv } from '~/support/dom/create';\n\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\n\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\n\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\nexport const jsPrefixes: ReadonlyArray<string> = [\n  'WebKit',\n  'Moz',\n  'O',\n  'MS',\n  'webkit',\n  'moz',\n  'o',\n  'ms',\n];\n\nexport const jsCache: { [key: string]: any } = {};\nexport const cssCache: { [key: string]: string } = {};\n\n/**\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\n * @param name The name of the CSS property which shall be get.\n */\nexport const cssProperty = (name: string): string => {\n  let result: string | undefined = cssCache[name];\n\n  if (hasOwnProperty(cssCache, name)) {\n    return result;\n  }\n\n  const uppercasedName: string = firstLetterToUpper(name);\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\n\n  each(cssPrefixes, (prefix: string) => {\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\n    const resultPossibilities: Array<string> = [\n      name, // transition\n      prefix + name, // -webkit-transition\n      prefixWithoutDashes + uppercasedName, // webkitTransition\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\n    ];\n\n    // eslint-disable-next-line no-return-assign\n    return !(result = resultPossibilities.find(\n      (resultPossibility: string) => elmStyle[resultPossibility] !== undefined\n    ));\n  });\n\n  // eslint-disable-next-line no-return-assign\n  return (cssCache[name] = result || '');\n};\n\n/**\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\n * @param property The CSS property to which the CSS property value(s) belong.\n * @param values The value(s) separated by spaces which shall be get.\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\n */\nexport const cssPropertyValue = (property: string, values: string, suffix?: string): string => {\n  const name = `${property} ${values}`;\n  let result: string | undefined = cssCache[name];\n\n  if (hasOwnProperty(cssCache, name)) {\n    return result;\n  }\n\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\n  const possbleValues: Array<string> = values.split(' ');\n  const preparedSuffix: string = suffix || '';\n  const cssPrefixesWithFirstEmpty = [''].concat(cssPrefixes);\n\n  each(possbleValues, (possibleValue: string) => {\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\n      const prop = prefix + possibleValue;\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\n      if (dummyStyle.length) {\n        result = prop;\n        return false;\n      }\n    });\n    return !result;\n  });\n\n  // eslint-disable-next-line no-return-assign\n  return (cssCache[name] = result || '');\n};\n\n/**\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\n * @param name The name of the JS function, object or constructor.\n */\nexport const jsAPI = <T = any>(name: string): T | undefined => {\n  if (isClient()) {\n    let result: any = jsCache[name] || window[name];\n\n    if (hasOwnProperty(jsCache, name)) {\n      return result;\n    }\n\n    each(jsPrefixes, (prefix: string) => {\n      result = result || window[prefix + firstLetterToUpper(name)];\n      return !result;\n    });\n\n    jsCache[name] = result;\n    return result;\n  }\n};\n", "import { isClient } from '~/support/compatibility/server';\nimport { jsAPI } from '~/support/compatibility/vendors';\n\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\nexport const IntersectionObserverConstructor =\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\nexport const cAF = jsAPI<typeof cancelAnimationFrame>('cancelAnimationFrame');\nexport const rAF = jsAPI<typeof requestAnimationFrame>('requestAnimationFrame');\nexport const setT = (isClient() && window.setTimeout) as (\n  handler: TimerHandler,\n  timeout?: number\n) => number;\nexport const clearT = (isClient() && window.clearTimeout) as (id?: number) => void;\n", "import { isString } from '~/support/utils/types';\nimport { each } from '~/support/utils/array';\nimport { keys } from '~/support/utils/object';\n\ntype ClassContainingElement = Node | Element | false | null | undefined;\ntype ClassName = string | false | null | undefined;\n\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\nconst classListAction = (\n  elm: ClassContainingElement,\n  className: ClassName,\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\n): boolean => {\n  const classList = elm && (elm as Element).classList;\n  let clazz: string;\n  let i = 0;\n  let result = false;\n\n  if (classList && className && isString(className)) {\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\n    result = classes.length > 0;\n    while ((clazz = classes[i++])) {\n      result = !!action(classList, clazz) && result;\n    }\n  }\n  return result;\n};\n\n/**\n * Check whether the given element has the given class name(s).\n * @param elm The element.\n * @param className The class name(s).\n */\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\n\n/**\n * Removes the given class name(s) from the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be removed. (separated by spaces)\n */\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\n};\n\n/**\n * Adds the given class name(s) to the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be added. (separated by spaces)\n * @returns A function which removes the added class name(s).\n */\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\n  return removeClass.bind(0, elm, className);\n};\n\n/**\n * Takes two className strings, compares them and returns the difference as array.\n * @param classNameA ClassName A.\n * @param classNameB ClassName B.\n */\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\n  const classNameASplit = classNameA && classNameA.split(' ');\n  const classNameBSplit = classNameB && classNameB.split(' ');\n  const tempObj = {};\n\n  each(classNameASplit, (className) => {\n    tempObj[className] = 1;\n  });\n  each(classNameBSplit, (className) => {\n    if (tempObj[className]) {\n      delete tempObj[className];\n    } else {\n      tempObj[className] = 1;\n    }\n  });\n\n  return keys(tempObj);\n};\n", "import { rAF, cAF } from '~/support/compatibility';\nimport { isFunction } from './types';\n\nconst { max } = Math;\nconst animationCurrentTime = () => performance.now();\n\n/**\n * percent: current percent (0 - 1),\n * time: current time (duration * percent),\n * min: start value\n * max: end value\n * duration: duration in ms\n */\nexport type EasingFn = (\n  percent: number,\n  time: number,\n  min: number,\n  max: number,\n  duration: number\n) => number;\n\nexport const animateNumber = (\n  from: number,\n  to: number,\n  duration: number,\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\n  easing?: EasingFn | false\n): ((complete?: boolean) => void) => {\n  let animationFrameId = 0;\n  const timeStart = animationCurrentTime();\n  const finalDuration = max(0, duration);\n  const frame = (complete?: boolean) => {\n    const timeNow = animationCurrentTime();\n    const timeElapsed = timeNow - timeStart;\n    const stopAnimation = timeElapsed >= finalDuration;\n    const percent = complete\n      ? 1\n      : 1 - (max(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\n    const progress =\n      (to - from) *\n        (isFunction(easing)\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\n          : percent) +\n      from;\n    const animationCompleted = stopAnimation || percent === 1;\n\n    onFrame && onFrame(progress, percent, animationCompleted);\n\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\n  };\n  frame();\n  return (complete) => {\n    cAF!(animationFrameId);\n    complete && frame(complete);\n  };\n};\n", "import { each } from '~/support/utils/array';\nimport type { WH, XY, TRBL } from '~/support/dom';\nimport type { PlainObject } from '~/typings';\n\n/**\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\n * @param a Object a.\n * @param b Object b.\n * @param props The props which shall be compared.\n */\nexport const equal = <T extends PlainObject>(\n  a: T | undefined,\n  b: T | undefined,\n  props: Array<keyof T>,\n  propMutation?: ((value: any) => any) | null | false\n): boolean => {\n  if (a && b) {\n    let result = true;\n    each(props, (prop) => {\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\n      if (compareA !== compareB) {\n        result = false;\n      }\n    });\n    return result;\n  }\n  return false;\n};\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\n\n/**\n * Compares two DOM Rects for their equality of their width and height properties\n * Also returns false if one of the DOM Rects is undefined or null.\n * @param a DOM Rect a.\n * @param b DOM Rect b.\n * @param round Whether the values should be rounded.\n */\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\n  equal<DOMRect>(a, b, ['width', 'height'], round && ((value) => Math.round(value)));\n", "import { isNumber, isFunction } from '~/support/utils/types';\nimport { from } from '~/support/utils/array';\nimport { rAF, cAF, setT, clearT } from '~/support/compatibility/apis';\n\ntype DebounceTiming = number | false | null | undefined;\n\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\n  /**\n   * The timeout for debouncing. If null, no debounce is applied.\n   */\n  _timeout?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * A maximum amount of ms. before the function will be called even with debounce.\n   */\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * Function which merges parameters for each canceled debounce.\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\n   */\n  _mergeParams?: (\n    prev: Parameters<FunctionToDebounce>,\n    curr: Parameters<FunctionToDebounce>\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\n}\n\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\n  _flush(): void;\n}\n\nexport const noop = () => {}; // eslint-disable-line\n\n/**\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\n */\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\n  let id: number;\n  const setTFn = timeout ? setT : rAF!;\n  const clearTFn = timeout ? clearT : cAF!;\n  return [\n    (callback: () => any) => {\n      clearTFn(id);\n      // @ts-ignore\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\n    },\n    () => clearTFn(id),\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\n};\n\n/**\n * Debounces the given function either with a timeout or a animation frame.\n * @param functionToDebounce The function which shall be debounced.\n * @param options Options for debouncing.\n */\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\n  functionToDebounce: FunctionToDebounce,\n  options?: DebounceOptions<FunctionToDebounce>\n): Debounced<FunctionToDebounce> => {\n  let maxTimeoutId: number | undefined;\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let clear: () => void = noop;\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\n\n  const invokeFunctionToDebounce = function (args: IArguments) {\n    clear();\n    clearT(maxTimeoutId);\n    maxTimeoutId = prevArguments = undefined;\n    clear = noop;\n    // eslint-disable-next-line\n    // @ts-ignore\n    functionToDebounce.apply(this, args);\n  };\n\n  const mergeParms = (\n    curr: Parameters<FunctionToDebounce>\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\n\n  const flush = () => {\n    /* istanbul ignore next */\n    if (clear !== noop) {\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\n    }\n  };\n\n  const debouncedFn = function () {\n    // eslint-disable-next-line prefer-rest-params\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\n\n    if (hasTimeout) {\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\n      const mergeParamsResult = mergeParms(args);\n      const invokedArgs = mergeParamsResult || args;\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\n\n      // if (!mergeParamsResult) {\n      //   invokeFunctionToDebounce(prevArguments || args);\n      // }\n\n      clear();\n      // @ts-ignore\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\n      clear = () => clearTimeoutFn(timeoutId);\n\n      if (hasMaxWait && !maxTimeoutId) {\n        maxTimeoutId = setT(flush, finalMaxWait as number);\n      }\n\n      prevArguments = latestArguments = invokedArgs;\n    } else {\n      invokeFunctionToDebounce(args);\n    }\n  };\n  debouncedFn._flush = flush;\n\n  return debouncedFn as Debounced<FunctionToDebounce>;\n};\n", "import { style } from '~/support/dom/style';\n\nexport interface WH<T = number> {\n  w: T;\n  h: T;\n}\n\nconst { round } = Math;\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\nconst zeroObj: WH = {\n  w: 0,\n  h: 0,\n};\n\n/**\n * Returns the window inner- width and height.\n */\nexport const windowSize = (): WH => ({\n  w: window.innerWidth,\n  h: window.innerHeight,\n});\n\n/**\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the scroll- width and height shall be returned.\n */\nexport const offsetSize = (elm: HTMLElement | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.offsetWidth,\n        h: elm.offsetHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const clientSize = (elm: HTMLElement | false | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.clientWidth,\n        h: elm.clientHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const scrollSize = (elm: HTMLElement | false | null | undefined): WH =>\n  elm\n    ? {\n        w: elm.scrollWidth,\n        h: elm.scrollHeight,\n      }\n    : zeroObj;\n\n/**\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the fractional- width and height shall be returned.\n */\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): WH => {\n  const cssHeight = parseFloat(style(elm, 'height')) || 0;\n  const cssWidth = parseFloat(style(elm, 'width')) || 0;\n  return {\n    w: cssWidth - round(cssWidth),\n    h: cssHeight - round(cssHeight),\n  };\n};\n\n/**\n * Returns the BoundingClientRect of the passed element.\n * @param elm The element of which the BoundingClientRect shall be returned.\n */\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\n\n/**\n * Determines whether the passed element has any dimensions.\n * @param elm The element.\n */\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\n  elm ? elementHasDimensions(elm as HTMLElement) : false;\n", "import { isUndefined } from '~/support/utils/types';\nimport { each, push, runEachAndClear } from '~/support/utils/array';\n\nlet passiveEventsSupport: boolean;\nconst supportPassiveEvents = (): boolean => {\n  if (isUndefined(passiveEventsSupport)) {\n    passiveEventsSupport = false;\n    try {\n      /* eslint-disable */\n      // @ts-ignore\n      window.addEventListener(\n        'test',\n        null,\n        Object.defineProperty({}, 'passive', {\n          get() {\n            passiveEventsSupport = true;\n          },\n        })\n      );\n      /* eslint-enable */\n    } catch (e) {}\n  }\n  return passiveEventsSupport;\n};\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\n\nexport interface OnOptions {\n  _capture?: boolean;\n  _passive?: boolean;\n  _once?: boolean;\n}\n\n/**\n * Removes the passed event listener for the passed events with the passed options.\n * @param target The element from which the listener shall be removed.\n * @param eventNames The eventsnames for which the listener shall be removed.\n * @param listener The listener which shall be removed.\n * @param capture The options of the removed listener.\n */\nexport const off = <T extends Event = Event>(\n  target: EventTarget,\n  eventNames: string,\n  listener: (event: T) => any,\n  capture?: boolean\n): void => {\n  each(splitEventNames(eventNames), (eventName) => {\n    target.removeEventListener(eventName, listener as EventListener, capture);\n  });\n};\n\n/**\n * Adds the passed event listener for the passed eventnames with the passed options.\n * @param target The element to which the listener shall be added.\n * @param eventNames The eventsnames for which the listener shall be called.\n * @param listener The listener which is called on the eventnames.\n * @param options The options of the added listener.\n */\nexport const on = <T extends Event = Event>(\n  target: EventTarget,\n  eventNames: string,\n  listener: (event: T) => any,\n  options?: OnOptions\n): (() => void) => {\n  const doSupportPassiveEvents = supportPassiveEvents();\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\n  const capture = (options && options._capture) || false;\n  const once = (options && options._once) || false;\n  const offListeners: (() => void)[] = [];\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\n    ? {\n        passive,\n        capture,\n      }\n    : capture;\n\n  each(splitEventNames(eventNames), (eventName) => {\n    const finalListener = (\n      once\n        ? (evt: T) => {\n            target.removeEventListener(eventName, finalListener, capture);\n            listener && listener(evt);\n          }\n        : listener\n    ) as EventListener;\n\n    push(offListeners, off.bind(null, target, eventName, finalListener, capture));\n    target.addEventListener(eventName, finalListener, nativeOptions);\n  });\n\n  return runEachAndClear.bind(0, offListeners);\n};\n\n/**\n * Shorthand for the stopPropagation event Method.\n * @param evt The event of which the stopPropagation method shall be called.\n */\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\n\n/**\n * Shorthand for the preventDefault event Method.\n * @param evt The event of which the preventDefault method shall be called.\n */\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\n\n/**\n * Shorthand for the stopPropagation and preventDefault event Method.\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\n */\nexport const stopAndPrevent = (evt: Event): void =>\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\n", "import { getBoundingClientRect } from '~/support/dom/dimensions';\n\nexport interface XY<T = number> {\n  x: T;\n  y: T;\n}\n\nconst zeroObj: XY = {\n  x: 0,\n  y: 0,\n};\n\n/**\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\n * @param elm The element of which the offset- top and left coordinates shall be returned.\n */\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): XY => {\n  const rect = elm ? getBoundingClientRect(elm) : 0;\n  return rect\n    ? {\n        x: rect.left + window.pageYOffset,\n        y: rect.top + window.pageXOffset,\n      }\n    : zeroObj;\n};\n\n/**\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\n * @param elm The element of which the offset- top and left coordinates shall be returned.\n */\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): XY =>\n  elm\n    ? {\n        x: elm.offsetLeft,\n        y: elm.offsetTop,\n      }\n    : zeroObj;\n", "import { isArray, isBoolean, isFunction, isString } from '~/support/utils/types';\r\nimport { keys } from '~/support/utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear } from '~/support/utils/array';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args?: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(isArray(listener) ? listener : [listener], callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = ((\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as any);\r\n\r\n      return removeEvent.bind(0, nameOrEventListeners as any, listenerOrPure as any);\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return runEachAndClear.bind(0, offFns);\r\n  }) as AddEvent<EventArgs>; // sorry!\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    const eventSet = events.get(name);\r\n\r\n    each(from(eventSet), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args as any);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n", "import {\n  assignDeep,\n  each,\n  isObject,\n  keys,\n  isArray,\n  hasOwnProperty,\n  isFunction,\n  isEmptyObject,\n} from '~/support';\nimport type { DeepPartial, DeepReadonly } from '~/typings';\n\nconst opsStringify = (value: any) =>\n  JSON.stringify(value, (_, val) => {\n    if (isFunction(val)) {\n      throw new Error();\n    }\n    return val;\n  });\n\n/**\n * The overflow behavior of an axis.\n */\nexport type OverflowBehavior =\n  /** No scrolling is possible and the content is clipped. */\n  | 'hidden'\n  /** No scrolling is possible and the content isn't clipped. */\n  | 'visible'\n  /** Scrolling is possible if there is an overflow. */\n  | 'scroll'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `hidden`.\n   */\n  | 'visible-hidden'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `scroll`.\n   */\n  | 'visible-scroll';\n\n/**\n * The scrollbars visibility behavior.\n */\nexport type ScrollbarsVisibilityBehavior =\n  /** The scrollbars are always visible. */\n  | 'visible'\n  /** The scrollbars are always hidden. */\n  | 'hidden'\n  /** The scrollbars are only visibile if there is overflow. */\n  | 'auto';\n\n/**\n * The scrollbars auto hide behavior\n */\nexport type ScrollbarsAutoHideBehavior =\n  /** The scrollbars are never hidden automatically. */\n  | 'never'\n  /** The scrollbars are hidden unless the user scrolls. */\n  | 'scroll'\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\n  | 'move'\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\n  | 'leave';\n\n/**\n * Describes the options of a OverlayScrollbars instance.\n */\nexport interface Options {\n  /** Whether the padding shall be absolute. */\n  paddingAbsolute: boolean;\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\n  showNativeOverlaidScrollbars: boolean;\n  /** Customizes the automatic update behavior. */\n  update: {\n    /**\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\n     */\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\n    /**\n     * The debounce which is used to detect content changes.\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\n     * If a single number customizes only the `timeout`.\n     *\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\n     */\n    debounce: [timeout: number, maxWait: number] | number | null;\n    /**\n     * HTML attributes which will trigger an update if they're changed.\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\n     */\n    attributes: string[] | null;\n    /**\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\n     * @param mutation The MutationRecord from the MutationObserver.\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\n     */\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\n  };\n  /** Customizes the overflow behavior per axis. */\n  overflow: {\n    /** The overflow behavior of the horizontal (x) axis. */\n    x: OverflowBehavior;\n    /** The overflow behavior of the vertical (y) axis. */\n    y: OverflowBehavior;\n  };\n  /** Customizes appearance of the scrollbars. */\n  scrollbars: {\n    /**\n     * The scrollbars theme.\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\n     */\n    theme: string | null;\n    /** The scrollbars visibility behavior. */\n    visibility: ScrollbarsVisibilityBehavior;\n    /** The scrollbars auto hide behavior. */\n    autoHide: ScrollbarsAutoHideBehavior;\n    /** The scrollbars auto hide delay in milliseconds. */\n    autoHideDelay: number;\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\n    dragScroll: boolean;\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\n    clickScroll: boolean;\n    /**\n     * An array of pointer types which shall be supported.\n     * Common pointer types are: `mouse`, `pen` and `touch`.\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    pointers: string[] | null;\n  };\n}\n\nexport type ReadonlyOptions = DeepReadonly<Options>;\n\nexport type PartialOptions = DeepPartial<Options>;\n\nexport const defaultOptions: Options = {\n  paddingAbsolute: false,\n  showNativeOverlaidScrollbars: false,\n  update: {\n    elementEvents: [['img', 'load']],\n    debounce: [0, 33],\n    attributes: null,\n    ignoreMutation: null,\n  },\n  overflow: {\n    x: 'scroll',\n    y: 'scroll',\n  },\n  scrollbars: {\n    theme: 'os-theme-dark',\n    visibility: 'auto',\n    autoHide: 'never',\n    autoHideDelay: 1300,\n    dragScroll: true,\n    clickScroll: false,\n    pointers: ['mouse', 'touch', 'pen'],\n  },\n};\n\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\n  const diff: DeepPartial<T> = {};\n  const optionsKeys = keys(newOptions).concat(keys(currOptions));\n\n  each(optionsKeys, (optionKey) => {\n    const currOptionValue = currOptions[optionKey];\n    const newOptionValue = newOptions[optionKey];\n\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\n      assignDeep((diff[optionKey] = {}), getOptionsDiff(currOptionValue, newOptionValue));\n      // delete empty nested objects\n      if (isEmptyObject(diff[optionKey])) {\n        delete diff[optionKey];\n      }\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\n      let isDiff = true;\n\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\n        try {\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\n            isDiff = false;\n          }\n        } catch {}\n      }\n\n      if (isDiff) {\n        diff[optionKey] = newOptionValue;\n      }\n    }\n  });\n\n  return diff;\n};\n", "// environment\nexport const classNameEnvironment = 'os-environment';\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\n\n// misc\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\n\n// initialize\nexport const dataAttributeInitialize = 'data-overlayscrollbars-initialize';\n\n// host\nexport const dataAttributeHost = 'data-overlayscrollbars';\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\nexport const dataValueHostOverflowVisible = 'overflowVisible';\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\nexport const dataValueHostUpdating = 'updating';\n\n// viewport\nexport const dataAttributeViewport = 'data-overlayscrollbars-viewport';\nexport const dataValueViewportArrange = 'arrange';\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\n\n// padding\nexport const dataAttributePadding = 'data-overlayscrollbars-padding';\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\n\n// content\nexport const dataAttributeContent = 'data-overlayscrollbars-content';\n\n// size observer\nexport const classNameSizeObserver = 'os-size-observer';\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\n\n// trinsic observer\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\n\n// scrollbars\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\nexport const classNameScrollbarThemeNone = 'os-theme-none';\nexport const classNameScrollbar = 'os-scrollbar';\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\nexport const classNameScrollbarAutoHidden = `${classNameScrollbar}-auto-hidden`;\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\n", "import { each, isArray, keys, push } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\n\r\n/** Describes the instance of a OverlayScrollbars plugin. */\r\nexport type PluginInstance =\r\n  /** A `static` plugin. Its neither bound to a instance nor to the static object. */\r\n  | Record<string, unknown>\r\n  /**\r\n   * A plugin which is bound to either a instance or to the static object.\r\n   * The function will be called multiple times. Once with the static object and each time a new instance is created.\r\n   * The plugin then can add new methods or fields to thow objects.\r\n   * These plugins should be side-effect free and deterministic. (same input produces same output)\r\n   */\r\n  | ((staticObj?: OverlayScrollbarsStatic, instanceObj?: OverlayScrollbars) => void);\r\n\r\n/** Describes a OverlayScrollbars plugin. */\r\nexport type Plugin<T extends PluginInstance = PluginInstance> = {\r\n  [pluginName: string]: T;\r\n};\r\n\r\nconst pluginRegistry: Record<string, PluginInstance> = {};\r\n\r\nexport const getPlugins = () => pluginRegistry;\r\n\r\nexport const addPlugin = (addedPlugin: Plugin | Plugin[]): Plugin[] => {\r\n  const result: Plugin[] = [];\r\n  each((isArray(addedPlugin) ? addedPlugin : [addedPlugin]) as Plugin[], (plugin) => {\r\n    // multiple \"sub-plugins\" per plugin object possible to support \"static\", \"instanceObj\" and \"staticObj\" sub-plugins per plugin\r\n    const pluginNameKeys = keys(plugin);\r\n    each(pluginNameKeys, (key) => {\r\n      push(result, (pluginRegistry[key] = plugin[key]));\r\n    });\r\n  });\r\n  return result;\r\n};\r\n", "import { each, hasOwnProperty, keys, push, isEmptyObject } from '~/support/utils';\nimport { type, isArray, isUndefined, isPlainObject, isString } from '~/support/utils/types';\nimport type { PlainObject, DeepPartial } from '~/typings';\n\nexport type OptionsObjectType = Record<string, unknown>;\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\n  OptionsTemplateTypeMap,\n  T\n>;\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\n\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\n  ? string extends T\n    ? OptionsTemplateValueNonEnum<T>\n    : string\n  : OptionsTemplateValueNonEnum<T>;\n\nexport type OptionsTemplate<T> = {\n  [P in keyof T]: T[P] extends OptionsObjectType\n    ? OptionsTemplate<T[P]>\n    : T[P] extends OptionsTemplateNativeTypes\n    ? OptionsTemplateValue<T[P]>\n    : never;\n};\n\nexport type OptionsValidationResult<T> = [\n  DeepPartial<T>, // validated\n  Record<string, unknown> // foreign\n];\n\ntype OptionsTemplateTypeMap = {\n  __TPL_boolean_TYPE__: boolean;\n  __TPL_number_TYPE__: number;\n  __TPL_string_TYPE__: string;\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\n  __TPL_function_TYPE__: OptionsFunctionType;\n  __TPL_null_TYPE__: null;\n  __TPL_object_TYPE__: OptionsObjectType;\n};\n\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\n  | OptionsTemplateType<T>\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\n\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\n  [P in keyof T]: TProps extends T[P] ? P : never;\n}[keyof T];\n\ntype OptionsTemplateTypesDictionary = {\n  readonly boolean: OptionsTemplateType<boolean>;\n  readonly number: OptionsTemplateType<number>;\n  readonly string: OptionsTemplateType<string>;\n  readonly array: OptionsTemplateType<Array<any>>;\n  readonly object: OptionsTemplateType<OptionsObjectType>;\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\n  readonly null: OptionsTemplateType<null>;\n};\n\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\n  boolean: '__TPL_boolean_TYPE__',\n  number: '__TPL_number_TYPE__',\n  string: '__TPL_string_TYPE__',\n  array: '__TPL_array_TYPE__',\n  object: '__TPL_object_TYPE__',\n  function: '__TPL_function_TYPE__',\n  null: '__TPL_null_TYPE__',\n};\n\n/**\n * Validates the given options object according to the given template object and returns a object which looks like:\n * {\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\n * }\n * @param template The template according to which the options object shall be validated.\n * @param options The options object which shall be validated.\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\n * Example (assume all properties are valid to the template):\n * Options object            : { a: 'a', b: 'b', c: 'c' }\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\n * Returned validated object : { c: 'c' }\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\n * @param propPath The propertyPath which lead to this object. (used for error logging)\n */\nconst validateRecursive = <T extends PlainObject>(\n  template: OptionsTemplate<T>,\n  options: DeepPartial<T>,\n  doWriteErrors?: boolean,\n  propPath?: string\n): OptionsValidationResult<T> => {\n  const validatedOptions: DeepPartial<T> = {};\n  const optionsCopy: DeepPartial<T> = { ...options };\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\n\n  each(props, (prop: Extract<keyof T, string>) => {\n    const optionsValue: any = options[prop];\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\n      template[prop];\n    const templateIsComplex = isPlainObject(templateValue);\n    const propPrefix = propPath ? `${propPath}.` : '';\n\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\n    if (templateIsComplex && isPlainObject(optionsValue)) {\n      const [validated, foreign] = validateRecursive(\n        templateValue as T,\n        optionsValue,\n        doWriteErrors,\n        propPrefix + prop\n      );\n      validatedOptions[prop] = validated as any;\n      optionsCopy[prop] = foreign as any;\n\n      each([optionsCopy, validatedOptions], (value) => {\n        if (isEmptyObject(value[prop])) {\n          delete value[prop];\n        }\n      });\n    } else if (!templateIsComplex) {\n      let isValid = false;\n      const errorEnumStrings: Array<string> = [];\n      const errorPossibleTypes: Array<string> = [];\n      const optionsValueType = type(optionsValue);\n      const templateValueArr: Array<string | OptionsTemplateTypes> = !isArray(templateValue)\n        ? [templateValue as string | OptionsTemplateTypes]\n        : (templateValue as Array<OptionsTemplateTypes>);\n\n      each(templateValueArr, (currTemplateType) => {\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\n        let typeString: string | undefined;\n        each(optionsTemplateTypes, (value: string, key: string) => {\n          if (value === currTemplateType) {\n            typeString = key;\n          }\n        });\n        const isEnumString = isUndefined(typeString);\n        if (isEnumString && isString(optionsValue)) {\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\n          const enumStringSplit = currTemplateType.split(' ');\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\n\n          // build error message\n          push(errorEnumStrings, enumStringSplit);\n        } else {\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\n        }\n\n        // build error message\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\n\n        // continue if invalid, break if valid\n        return !isValid;\n      });\n\n      if (isValid) {\n        validatedOptions[prop] = optionsValue;\n      } else if (doWriteErrors) {\n        console.warn(\n          `${\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\n          }${\n            errorEnumStrings.length > 0\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\n              : ''\n          }`\n        );\n      }\n\n      delete optionsCopy[prop];\n    }\n  });\n\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\n};\n\n/**\n * Validates the given options object according to the given template object and returns a tuple which looks like:\n * [\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\n * ]\n * @param template The template according to which the options object shall be validated.\n * @param options The options object which shall be validated.\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\n */\nconst validateOptions = <T extends PlainObject>(\n  template: OptionsTemplate<T>,\n  options: DeepPartial<T>,\n  doWriteErrors?: boolean\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\n\nexport { validateOptions, optionsTemplateTypes };\n", "import {\n  validateOptions,\n  optionsTemplateTypes as oTypes,\n} from '~/plugins/optionsValidationPlugin/validation';\nimport type {\n  Options,\n  PartialOptions,\n  OverflowBehavior,\n  ScrollbarsVisibilityBehavior,\n  ScrollbarsAutoHideBehavior,\n} from '~/options';\nimport type {\n  OptionsTemplate,\n  OptionsTemplateValue,\n} from '~/plugins/optionsValidationPlugin/validation';\nimport type { Plugin } from '~/plugins';\n\nconst numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\nconst booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\nconst arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [oTypes.array, oTypes.null];\nconst overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\n  'hidden scroll visible visible-hidden';\nconst scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\n  'visible hidden auto';\nconst scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\n  'never scroll leavemove';\n\nconst optionsTemplate: OptionsTemplate<Options> = {\n  // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\n  paddingAbsolute: booleanAllowedValues, // true || false\n  showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\n  update: {\n    elementEvents: arrayNullValues, // array of tuples || null\n    attributes: arrayNullValues,\n    debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\n    ignoreMutation: [oTypes.function, oTypes.null], // function || null\n  },\n  overflow: {\n    x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\n    y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\n  },\n  scrollbars: {\n    theme: [oTypes.string, oTypes.null], // string || null\n    visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\n    autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\n    autoHideDelay: numberAllowedValues, // number\n    dragScroll: booleanAllowedValues, // true || false\n    clickScroll: booleanAllowedValues, // true || false\n    pointers: [oTypes.array, oTypes.null], // string array\n  },\n  /*\n  textarea: {\n    dynWidth: booleanAllowedValues, // true || false\n    dynHeight: booleanAllowedValues, // true || false\n    inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\n  },\n  */\n};\n\nexport type OptionsValidationPluginInstance = {\n  _: (options: PartialOptions, doWriteErrors?: boolean) => PartialOptions;\n};\n\nexport const optionsValidationPluginName = '__osOptionsValidationPlugin';\n\nexport const OptionsValidationPlugin: Plugin<OptionsValidationPluginInstance> =\n  /* @__PURE__ */ (() => ({\n    [optionsValidationPluginName]: {\n      _: (options: PartialOptions, doWriteErrors?: boolean) => {\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\n        return { ...foreign, ...validated };\n      },\n    },\n  }))();\n", "import {\n  createDOM,\n  style,\n  appendChildren,\n  offsetSize,\n  scrollLeft,\n  scrollTop,\n  on,\n  addClass,\n  equalWH,\n  push,\n  cAF,\n  rAF,\n  stopPropagation,\n} from '~/support';\nimport {\n  classNameSizeObserverListenerScroll,\n  classNameSizeObserverListenerItem,\n  classNameSizeObserverListenerItemFinal,\n} from '~/classnames';\nimport type { Plugin } from '~/plugins';\n\nexport type SizeObserverPluginInstance = {\n  _: (\n    listenerElement: HTMLElement,\n    onSizeChangedCallback: (appear: boolean) => any,\n    observeAppearChange: boolean\n  ) => [appearCallback: () => any, offFns: (() => any)[]];\n};\n\nconst scrollAmount = 3333333;\nconst scrollEventName = 'scroll';\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\n\nexport const SizeObserverPlugin: Plugin<SizeObserverPluginInstance> = /* @__PURE__ */ (() => ({\n  [sizeObserverPluginName]: {\n    _: (listenerElement, onSizeChangedCallback, observeAppearChange) => {\n      const observerElementChildren = createDOM(\n        `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\n      );\n      appendChildren(listenerElement, observerElementChildren);\n      addClass(listenerElement, classNameSizeObserverListenerScroll);\n      const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\n      const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\n      const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\n      const expandElementChild = expandElement?.firstChild as HTMLElement;\n\n      let cacheSize = offsetSize(observerElementChildrenRoot);\n      let currSize = cacheSize;\n      let isDirty = false;\n      let rAFId: number;\n\n      const reset = () => {\n        scrollLeft(expandElement, scrollAmount);\n        scrollTop(expandElement, scrollAmount);\n        scrollLeft(shrinkElement, scrollAmount);\n        scrollTop(shrinkElement, scrollAmount);\n      };\n      const onResized = (appear?: unknown) => {\n        rAFId = 0;\n        if (isDirty) {\n          cacheSize = currSize;\n          onSizeChangedCallback(appear === true);\n        }\n      };\n      const onScroll = (scrollEvent?: Event | false) => {\n        currSize = offsetSize(observerElementChildrenRoot);\n        isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\n\n        if (scrollEvent) {\n          stopPropagation(scrollEvent);\n\n          if (isDirty && !rAFId) {\n            cAF!(rAFId);\n            rAFId = rAF!(onResized);\n          }\n        } else {\n          onResized(scrollEvent === false);\n        }\n\n        reset();\n      };\n      const offListeners = push(\n        [],\n        [on(expandElement, scrollEventName, onScroll), on(shrinkElement, scrollEventName, onScroll)]\n      );\n\n      // lets assume that the divs will never be that large and a constant value is enough\n      style(expandElementChild, {\n        width: scrollAmount,\n        height: scrollAmount,\n      });\n\n      rAF!(reset);\n\n      return [observeAppearChange ? onScroll.bind(0, false) : reset, offListeners];\n    },\n  },\n}))();\n", "import { keys, attr, style, noop, each, assignDeep, windowSize, attrClass } from '~/support';\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\nimport type { WH, UpdateCache, XY } from '~/support';\nimport type { StyleObject } from '~/typings';\nimport type { StructureSetupState } from '~/setups/structureSetup';\nimport type {\n  ViewportOverflowState,\n  GetViewportOverflowState,\n  HideNativeScrollbars,\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\nimport type { InternalEnvironment } from '~/environment';\nimport type { Plugin } from '~/plugins';\n\nexport type ArrangeViewport = (\n  viewportOverflowState: ViewportOverflowState,\n  viewportScrollSize: WH<number>,\n  sizeFraction: WH<number>,\n  directionIsRTL: boolean\n) => boolean;\n\nexport type UndoViewportArrangeResult = [\n  redoViewportArrange: () => void,\n  overflowState?: ViewportOverflowState\n];\n\nexport type UndoArrangeViewport = (\n  showNativeOverlaidScrollbars: boolean,\n  directionIsRTL: boolean,\n  viewportOverflowState?: ViewportOverflowState\n) => UndoViewportArrangeResult;\n\nexport type ScrollbarsHidingPluginInstance = {\n  _createUniqueViewportArrangeElement(env: InternalEnvironment): HTMLStyleElement | false;\n  _overflowUpdateSegment(\n    doViewportArrange: boolean,\n    flexboxGlue: boolean,\n    viewport: HTMLElement,\n    viewportArrange: HTMLStyleElement | false | null | undefined,\n    getState: () => StructureSetupState,\n    getViewportOverflowState: GetViewportOverflowState,\n    hideNativeScrollbars: HideNativeScrollbars\n  ): [ArrangeViewport, UndoArrangeViewport];\n  _envWindowZoom(): (\n    envInstance: InternalEnvironment,\n    updateNativeScrollbarSizeCache: UpdateCache<XY<number>>,\n    triggerEvent: () => void\n  ) => void;\n};\n\nlet contentArrangeCounter = 0;\nconst { round, abs } = Math;\nconst getWindowDPR = (): number => {\n  // eslint-disable-next-line\n  // @ts-ignore\n  const dDPI = window.screen.deviceXDPI || 0;\n  // eslint-disable-next-line\n  // @ts-ignore\n  const sDPI = window.screen.logicalXDPI || 1;\n  return window.devicePixelRatio || dDPI / sDPI;\n};\n\nconst diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\n  const absValOne = abs(valOne);\n  const absValTwo = abs(valTwo);\n  return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\n};\n\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\n\nexport const ScrollbarsHidingPlugin: Plugin<ScrollbarsHidingPluginInstance> =\n  /* @__PURE__ */ (() => ({\n    [scrollbarsHidingPluginName]: {\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment) => {\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\n        const create =\n          !_cssCustomProperties &&\n          !_nativeScrollbarsHiding &&\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n        const result = create ? document.createElement('style') : false;\n\n        if (result) {\n          attr(\n            result,\n            'id',\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\n          );\n          contentArrangeCounter++;\n        }\n\n        return result;\n      },\n      _overflowUpdateSegment: (\n        doViewportArrange,\n        flexboxGlue,\n        viewport,\n        viewportArrange,\n        getState,\n        getViewportOverflowState,\n        hideNativeScrollbars\n      ) => {\n        /**\n         * Sets the styles of the viewport arrange element.\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\n         * @param viewportScrollSize The content scroll size.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\n         */\n        const arrangeViewport: ArrangeViewport = (\n          viewportOverflowState,\n          viewportScrollSize,\n          sizeFraction,\n          directionIsRTL\n        ) => {\n          if (doViewportArrange) {\n            const { _viewportPaddingStyle } = getState();\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\n              ? 'paddingRight'\n              : 'paddingLeft';\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\n              viewportArrangeHorizontalPaddingKey\n            ] as number;\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\n            const arrangeSize = {\n              w:\n                hideOffsetY && arrangeY\n                  ? `${\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\n                    }px`\n                  : '',\n              h:\n                hideOffsetX && arrangeX\n                  ? `${\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\n                    }px`\n                  : '',\n            };\n\n            // adjust content arrange / before element\n            if (viewportArrange) {\n              const { sheet } = viewportArrange;\n              if (sheet) {\n                const { cssRules } = sheet;\n                if (cssRules) {\n                  if (!cssRules.length) {\n                    sheet.insertRule(\n                      `#${attr(\n                        viewportArrange,\n                        'id'\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\n                      0\n                    );\n                  }\n\n                  // @ts-ignore\n                  const ruleStyle = cssRules[0].style;\n\n                  ruleStyle.width = arrangeSize.w;\n                  ruleStyle.height = arrangeSize.h;\n                }\n              }\n            } else {\n              style<'--os-vaw' | '--os-vah'>(viewport, {\n                '--os-vaw': arrangeSize.w,\n                '--os-vah': arrangeSize.h,\n              });\n            }\n          }\n\n          return doViewportArrange;\n        };\n\n        /**\n         * Removes all styles applied because of the viewport arrange strategy.\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\n         */\n        const undoViewportArrange: UndoArrangeViewport = (\n          showNativeOverlaidScrollbars,\n          directionIsRTL,\n          viewportOverflowState?\n        ) => {\n          if (doViewportArrange) {\n            const finalViewportOverflowState =\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\n            const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const finalPaddingStyle: StyleObject = {};\n            const assignProps = (props: string) =>\n              each(props.split(' '), (prop) => {\n                finalPaddingStyle[prop] = viewportPaddingStyle[prop];\n              });\n\n            if (arrangeX) {\n              assignProps('marginBottom paddingTop paddingBottom');\n            }\n\n            if (arrangeY) {\n              assignProps('marginLeft marginRight paddingLeft paddingRight');\n            }\n\n            const prevStyle = style(viewport, keys(finalPaddingStyle));\n\n            // add class\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\n\n            if (!flexboxGlue) {\n              finalPaddingStyle.height = '';\n            }\n\n            style(viewport, finalPaddingStyle);\n\n            return [\n              () => {\n                hideNativeScrollbars(\n                  finalViewportOverflowState,\n                  directionIsRTL,\n                  doViewportArrange,\n                  prevStyle\n                );\n                style(viewport, prevStyle);\n                // remove class\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\n              },\n              finalViewportOverflowState,\n            ];\n          }\n          return [noop];\n        };\n\n        return [arrangeViewport, undoViewportArrange];\n      },\n      _envWindowZoom: () => {\n        let size = { w: 0, h: 0 };\n        let dpr = 0;\n\n        return (envInstance, updateNativeScrollbarSizeCache, triggerEvent) => {\n          const sizeNew = windowSize();\n          const deltaSize = {\n            w: sizeNew.w - size.w,\n            h: sizeNew.h - size.h,\n          };\n\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\n            return;\n          }\n\n          const deltaAbsSize = {\n            w: abs(deltaSize.w),\n            h: abs(deltaSize.h),\n          };\n          const deltaAbsRatio = {\n            w: abs(round(sizeNew.w / (size.w / 100.0))),\n            h: abs(round(sizeNew.h / (size.h / 100.0))),\n          };\n          const dprNew = getWindowDPR();\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\n          const dprChanged = dprNew !== dpr && dprNew > 0;\n          const isZoom = deltaIsBigger && difference && dprChanged;\n\n          if (isZoom) {\n            const [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\n\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\n\n            if (scrollbarSizeChanged) {\n              triggerEvent();\n            }\n          }\n\n          size = sizeNew;\n          dpr = dprNew;\n        };\n      },\n    },\n  }))();\n", "import { animateNumber, noop } from '~/support';\nimport type { Plugin } from '~/plugins';\n\nexport type ClickScrollPluginInstance = {\n  _: (\n    moveHandleRelative: (deltaMovement: number) => void,\n    getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\n    startOffset: number,\n    handleLength: number,\n    relativeTrackPointerOffset: number\n  ) => () => void;\n};\n\nexport const clickScrollPluginName = '__osClickScrollPlugin';\n\nexport const ClickScrollPlugin: Plugin<ClickScrollPluginInstance> = /* @__PURE__ */ (() => ({\n  [clickScrollPluginName]: {\n    _: (\n      moveHandleRelative,\n      getHandleOffset,\n      startOffset,\n      handleLength,\n      relativeTrackPointerOffset\n    ) => {\n      // click scroll animation\n      let iteration = 0;\n      let clear = noop;\n      const animateClickScroll = (clickScrollProgress: number) => {\n        clear = animateNumber(\n          clickScrollProgress,\n          clickScrollProgress + handleLength * Math.sign(startOffset),\n          133,\n          (animationProgress, _, animationCompleted) => {\n            moveHandleRelative(animationProgress);\n            const handleStartBound = getHandleOffset();\n            const handleEndBound = handleStartBound + handleLength;\n            const mouseBetweenHandleBounds =\n              relativeTrackPointerOffset >= handleStartBound &&\n              relativeTrackPointerOffset <= handleEndBound;\n\n            if (animationCompleted && !mouseBetweenHandleBounds) {\n              if (iteration) {\n                animateClickScroll(animationProgress);\n              } else {\n                const firstIterationPauseTimeout = setTimeout(() => {\n                  animateClickScroll(animationProgress);\n                }, 222);\n                clear = () => {\n                  clearTimeout(firstIterationPauseTimeout);\n                };\n              }\n              iteration++;\n            }\n          }\n        );\n      };\n\n      animateClickScroll(0);\n\n      return () => clear();\n    },\n  },\n}))();\n", "import {\n  createDOM,\n  addClass,\n  style,\n  appendChildren,\n  fractionalSize,\n  clientSize,\n  absoluteCoordinates,\n  offsetSize,\n  scrollLeft,\n  removeAttr,\n  removeElements,\n  equalBCRWH,\n  getBoundingClientRect,\n  assignDeep,\n  cssProperty,\n  createCache,\n  equalXY,\n  createEventListenerHub,\n  debounce,\n} from '~/support';\nimport {\n  classNameEnvironment,\n  classNameEnvironmentFlexboxGlue,\n  classNameEnvironmentFlexboxGlueMax,\n  classNameScrollbarHidden,\n} from '~/classnames';\nimport { defaultOptions } from '~/options';\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\nimport type { XY, EventListener } from '~/support';\nimport type { Options, PartialOptions } from '~/options';\nimport type { ScrollbarsHidingPluginInstance } from '~/plugins';\nimport type { Initialization, PartialInitialization } from '~/initialization';\n\ntype EnvironmentEventArgs = {\n  z: [];\n  r: [];\n};\n\n/**\n * Describes the OverlayScrollbars environment.\n */\nexport interface Environment {\n  /** The native scrollbars size of the browser / system. */\n  scrollbarsSize: XY<number>;\n  /** Whether the native scrollbars are overlaid. */\n  scrollbarsOverlaid: XY<boolean>;\n  /** Whether the browser supports native scrollbars hiding. */\n  scrollbarsHiding: boolean;\n  /** The rtl scroll behavior of the browser. */\n  rtlScrollBehavior: { n: boolean; i: boolean };\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\n  flexboxGlue: boolean;\n  /** Whether the browser supports custom css properties. (also known as css variables) */\n  cssCustomProperties: boolean;\n  /** The default Initialization to use if nothing else is specified. */\n  staticDefaultInitialization: Initialization;\n  /** The default Options to use if nothing else is specified. */\n  staticDefaultOptions: Options;\n\n  /** Returns the current default Initialization. */\n  getDefaultInitialization(): Initialization;\n  /** Returns the current default Options. */\n  getDefaultOptions(): Options;\n\n  /**\n   * Sets a new default Initialization.\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\n   * @param newDefaultInitialization The new default Initialization.\n   * @returns The current default Initialization.\n   */\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\n  /**\n   * Sets new default Options.\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\n   * @param newDefaultOptions The new default Options.\n   * @returns The current default options.\n   */\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\nexport interface InternalEnvironment {\n  readonly _nativeScrollbarsSize: XY;\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\n  readonly _nativeScrollbarsHiding: boolean;\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\n  readonly _flexboxGlue: boolean;\n  readonly _cssCustomProperties: boolean;\n  readonly _staticDefaultInitialization: Initialization;\n  readonly _staticDefaultOptions: Options;\n  _addZoomListener(listener: EventListener<EnvironmentEventArgs, 'z'>): () => void;\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\n  _getDefaultInitialization(): Initialization;\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\n  _getDefaultOptions(): Options;\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\nlet environmentInstance: InternalEnvironment;\n\nconst getNativeScrollbarSize = (\n  body: HTMLElement,\n  measureElm: HTMLElement,\n  measureElmChild: HTMLElement,\n  clear?: boolean\n): XY => {\n  appendChildren(body, measureElm);\n\n  const cSize = clientSize(measureElm);\n  const oSize = offsetSize(measureElm);\n  const fSize = fractionalSize(measureElmChild);\n\n  clear && removeElements(measureElm);\n\n  return {\n    x: oSize.h - cSize.h + fSize.h,\n    y: oSize.w - cSize.w + fSize.w,\n  };\n};\n\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\n  let result = false;\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\n  try {\n    result =\n      style(testElm, cssProperty('scrollbar-width')) === 'none' ||\n      window.getComputedStyle(testElm, '::-webkit-scrollbar').getPropertyValue('display') ===\n        'none';\n  } catch (ex) {}\n  revertClass();\n  return result;\n};\n\nconst getRtlScrollBehavior = (\n  parentElm: HTMLElement,\n  childElm: HTMLElement\n): { i: boolean; n: boolean } => {\n  const strHidden = 'hidden';\n  style(parentElm, { overflowX: strHidden, overflowY: strHidden, direction: 'rtl' });\n  scrollLeft(parentElm, 0);\n\n  const parentOffset = absoluteCoordinates(parentElm);\n  const childOffset = absoluteCoordinates(childElm);\n  scrollLeft(parentElm, -999); // https://github.com/KingSora/OverlayScrollbars/issues/187\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\n  return {\n    /**\n     * origin direction = determines if the zero scroll position is on the left or right side\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\n     * true = on the left side\n     * false = on the right side\n     */\n    i: parentOffset.x === childOffset.x,\n    /**\n     * negative = determines if the maximum scroll is positive or negative\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\n     * true = negative\n     * false = positive\n     */\n    n: childOffset.x !== childOffsetAfterScroll.x,\n  };\n};\n\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\n  const minOffsetsize = getBoundingClientRect(childElm);\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\n\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\n  const maxOffsetsize = getBoundingClientRect(childElm);\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\n\n  revertFbxGlue();\n  revertFbxGlueMax();\n\n  return supportsMin && supportsMax;\n};\n\nconst createEnvironment = (): InternalEnvironment => {\n  const { body } = document;\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\n  const envElm = envDOM[0] as HTMLElement;\n  const envChildElm = envElm.firstChild as HTMLElement;\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\n    {\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\n      _equal: equalXY,\n    },\n    getNativeScrollbarSize.bind(0, body, envElm, envChildElm, true)\n  );\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\n  const nativeScrollbarsOverlaid = {\n    x: nativeScrollbarsSize.x === 0,\n    y: nativeScrollbarsSize.y === 0,\n  };\n  const staticDefaultInitialization: Initialization = {\n    elements: {\n      host: null,\n      padding: !nativeScrollbarsHiding,\n      viewport: (target) =>\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\n      content: false,\n    },\n    scrollbars: {\n      slot: true,\n    },\n    cancel: {\n      nativeScrollbarsOverlaid: false,\n      body: null,\n    },\n  };\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\n  const getDefaultOptions = (assignDeep as typeof assignDeep<Options, Options>).bind(\n    0,\n    {} as Options,\n    staticDefaultOptions\n  );\n  const getDefaultInitialization = (\n    assignDeep as typeof assignDeep<Initialization, Initialization>\n  ).bind(0, {} as Initialization, staticDefaultInitialization);\n\n  const env: InternalEnvironment = {\n    _nativeScrollbarsSize: nativeScrollbarsSize,\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\n    _cssCustomProperties: style(envElm, 'zIndex') === '-1',\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\n    _addZoomListener: addEvent.bind(0, 'z'),\n    _addResizeListener: addEvent.bind(0, 'r'),\n    _getDefaultInitialization: getDefaultInitialization,\n    _setDefaultInitialization: (newInitializationStrategy) =>\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\n      getDefaultInitialization(),\n    _getDefaultOptions: getDefaultOptions,\n    _setDefaultOptions: (newDefaultOptions) =>\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\n  };\n  const windowAddEventListener = window.addEventListener;\n  const debouncedWindowResize = debounce((zoom: boolean) => triggerEvent(zoom ? 'z' : 'r'), {\n    _timeout: 33,\n    _maxDelay: 99,\n  });\n\n  removeAttr(envElm, 'style');\n  removeElements(envElm);\n\n  // needed in case content has css viewport units\n  windowAddEventListener('resize', debouncedWindowResize.bind(0, false));\n\n  if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\n    let resizeFn: undefined | ReturnType<ScrollbarsHidingPluginInstance['_envWindowZoom']>;\n    windowAddEventListener('resize', () => {\n      const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\n        | ScrollbarsHidingPluginInstance\n        | undefined;\n\n      resizeFn = resizeFn || (scrollbarsHidingPlugin && scrollbarsHidingPlugin._envWindowZoom());\n      resizeFn &&\n        resizeFn(env, updateNativeScrollbarSizeCache, debouncedWindowResize.bind(0, true));\n    });\n  }\n\n  return env;\n};\n\nconst getEnvironment = (): InternalEnvironment => {\n  if (!environmentInstance) {\n    environmentInstance = createEnvironment();\n  }\n  return environmentInstance;\n};\n\nexport { getEnvironment };\n", "import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { DeepPartial } from '~/typings';\n\ntype StaticInitialization = HTMLElement | false | null;\ntype DynamicInitialization = HTMLElement | boolean | null;\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\n  StaticInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\n  DynamicInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\n\n/**\n * Static elements are elements which MUST be present in the final DOM.\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\n */\nexport type StaticInitializationElement<Args extends any[]> =\n  /** A function which returns the the StaticInitialization value. */\n  | ((...args: Args) => StaticInitialization)\n  /** The StaticInitialization value. */\n  | StaticInitialization;\n\n/**\n * Dynamic elements are elements which CAN be present in the final DOM.\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\n * With `true` an appropriate element is generated automatically.\n * With `false`, `null` or `undefined` the element won't be in the DOM.\n */\nexport type DynamicInitializationElement<Args extends any[]> =\n  /** A function which returns the the DynamicInitialization value. */\n  | ((...args: Args) => DynamicInitialization)\n  /** The DynamicInitialization value. */\n  | DynamicInitialization;\n\n/**\n * Describes how a OverlayScrollbar instance should initialize.\n */\nexport type Initialization = {\n  /**\n   * Customizes which elements are generated and used.\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\n   * Any passed function should be a \"pure\" function. (same input produces same output)\n   */\n  elements: {\n    /**\n     * Assign a custom element as the host element.\n     * Only relevant if the target element is a Textarea.\n     */\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the viewport element. */\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the padding element or force the element not to be generated. */\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the content element or force the element not to be generated. */\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\n  };\n  /**\n   * Customizes elements related to the scrollbars.\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\n   */\n  scrollbars: {\n    slot: DynamicInitializationElement<\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\n    >;\n  };\n  /**\n   * Customizes the cancelation behavior.\n   */\n  cancel: {\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\n    nativeScrollbarsOverlaid: boolean;\n    /**\n     * Whether the initialization shall be canceled if its applied to a body element.\n     * With `true` an initialization is always canceled, with `false` its never canceled.\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\n     */\n    body: boolean | null;\n  };\n};\n\nexport type PartialInitialization = DeepPartial<Initialization>;\n\n/** The initialization target element. */\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\n\n/**\n * The initialization target object.\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\n */\nexport type InitializationTargetObject = PartialInitialization & {\n  target: InitializationTargetElement;\n};\n\n/** The initialization target. */\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\n\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\n  args: any,\n  value: any\n): T => (isFunction(value) ? value.apply(0, args) : value);\n\nexport const staticInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\n  staticInitializationElementValue?: StaticInitializationElement<Args>\n): HTMLElement => {\n  const staticInitialization = isUndefined(staticInitializationElementValue)\n    ? defaultStaticInitializationElement\n    : staticInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\n    args,\n    staticInitialization\n  );\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\n};\n\nexport const dynamicInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\n): HTMLElement | false => {\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\n    ? defaultDynamicInitializationElement\n    : dynamicInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\n    args,\n    dynamicInitialization\n  );\n  return (\n    !!resolvedInitialization &&\n    (isHTMLElement(resolvedInitialization)\n      ? resolvedInitialization\n      : fallbackDynamicInitializationElement.apply(0, args))\n  );\n};\n\nexport const cancelInitialization = (\n  isBody: boolean,\n  defaultCancelInitialization: Initialization['cancel'],\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\n): boolean => {\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding } = getEnvironment();\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\n    defaultCancelInitialization;\n\n  const resolvedNativeScrollbarsOverlaid =\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\n\n  const finalNativeScrollbarsOverlaid =\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\n    resolvedNativeScrollbarsOverlaid;\n  const finalDocumentScrollingElement =\n    isBody &&\n    (isNull(resolvedDocumentScrollingElement)\n      ? !_nativeScrollbarsHiding\n      : resolvedDocumentScrollingElement);\n\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\n};\n", "import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n", "import { assignDeep, hasOwnProperty } from '~/support';\nimport type { PartialOptions, ReadonlyOptions } from '~/options';\n\nexport type SetupElements<T extends Record<string, any>> = [elements: T, destroy: () => void];\n\nexport type SetupUpdate<Args extends any[], R> = (\n  changedOptions: PartialOptions,\n  force: boolean,\n  ...args: Args\n) => R;\n\nexport type SetupUpdateCheckOption = <T>(path: string) => [value: T, changed: boolean];\n\nexport type SetupUpdateSegment<Hints extends Record<string, any>> = (\n  updateHints: Hints,\n  checkOption: SetupUpdateCheckOption,\n  force: boolean\n) => Partial<Hints> | void;\n\nexport type SetupState<T extends Record<string, any>> = [\n  get: () => T,\n  set: (newState: Partial<T>) => void\n];\n\nexport type Setup<\n  DynamicState,\n  StaticState extends Record<string, any> = Record<string, any>,\n  Args extends any[] = [],\n  R = void\n> = [update: SetupUpdate<Args, R>, state: (() => DynamicState) & StaticState, destroy: () => void];\n\nconst getPropByPath = <T>(obj: any, path: string): T =>\n  obj\n    ? path.split('.').reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\n    : undefined;\n\nexport const createOptionCheck =\n  (\n    options: ReadonlyOptions,\n    changedOptions: PartialOptions,\n    force?: boolean\n  ): SetupUpdateCheckOption =>\n  (path: string) =>\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\n\nexport const createState = <S extends Record<string, any>>(initialState: S): SetupState<S> => {\n  let state: S = initialState;\n  return [\n    () => state,\n    (newState: Partial<S>) => {\n      state = assignDeep({}, state, newState);\n    },\n  ];\n};\n", "import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  indexOf,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  on,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPluginInstance } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nconst tabIndexStr = 'tabindex';\r\nconst createNewDiv = createDiv.bind(0, '');\r\n\r\nconst unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n  appendChildren(parent(elm), contents(elm));\r\n  removeElements(elm);\r\n};\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\r\n    | ScrollbarsHidingPluginInstance\r\n    | undefined;\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const wnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = generalStaticInitializationElement.bind(0, [targetElement]);\r\n  const dynamicInitializationElement = generalDynamicInitializationElement.bind(0, [targetElement]);\r\n  const resolveInitialization = generalResolveInitialization.bind(0, [targetElement]);\r\n  const generateViewportElement = staticInitializationElement.bind(\r\n    0,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = dynamicInitializationElement.bind(\r\n    0,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and viewport is generated\r\n  // if falsy the passed element is the final viewport element and the content element is generated\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus = !viewportIsTarget && wnd.top === wnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: wnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key: string) => {\r\n    const value = evaluatedTargetObj[key];\r\n    return push(arr, value && !parent(value) ? value : false);\r\n  }, [] as HTMLElement[]);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? indexOf(generatedElements, elm) > -1 : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      if (elementIsGenerated(_content)) {\r\n        unwrap(_content);\r\n      }\r\n      if (elementIsGenerated(_viewport)) {\r\n        unwrap(_viewport);\r\n      }\r\n      if (elementIsGenerated(_padding)) {\r\n        unwrap(_padding);\r\n      }\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, removeAttr.bind(0, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, removeElements.bind(0, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = on(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, runEachAndClear.bind(0, destroyFns)];\r\n};\r\n", "import { style } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\n/**\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const { _content } = structureSetupElements;\n  const [getState] = state;\n\n  return (updateHints) => {\n    const { _flexboxGlue } = getEnvironment();\n    const { _heightIntrinsic } = getState();\n    const { _heightIntrinsicChanged } = updateHints;\n    const heightIntrinsicChanged = (_content || !_flexboxGlue) && _heightIntrinsicChanged;\n\n    if (heightIntrinsicChanged) {\n      style(_content, {\n        height: _heightIntrinsic ? '' : '100%',\n      });\n    }\n\n    return {\n      _sizeChanged: heightIntrinsicChanged,\n      _contentMutation: heightIntrinsicChanged,\n    };\n  };\n};\n", "import { createCache, topRightBottomLeft, equalTRBL, style, assignDeep } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { StyleObject } from '~/typings';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\n/**\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const [getState, setState] = state;\n  const { _host, _padding, _viewport, _viewportIsTarget: _isSingleElm } = structureSetupElements;\n  const [updatePaddingCache, currentPaddingCache] = createCache(\n    {\n      _equal: equalTRBL,\n      _initialValue: topRightBottomLeft(),\n    },\n    topRightBottomLeft.bind(0, _host, 'padding', '')\n  );\n\n  return (updateHints, checkOption, force) => {\n    let [padding, paddingChanged] = currentPaddingCache(force);\n    const { _nativeScrollbarsHiding: _nativeScrollbarStyling, _flexboxGlue } = getEnvironment();\n    const { _directionIsRTL } = getState();\n    const { _sizeChanged, _contentMutation, _directionChanged } = updateHints;\n    const [paddingAbsolute, paddingAbsoluteChanged] = checkOption('paddingAbsolute');\n    const contentMutation = !_flexboxGlue && _contentMutation;\n\n    if (_sizeChanged || paddingChanged || contentMutation) {\n      [padding, paddingChanged] = updatePaddingCache(force);\n    }\n\n    const paddingStyleChanged =\n      !_isSingleElm && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\n\n    if (paddingStyleChanged) {\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarStyling);\n      const paddingHorizontal = padding.r + padding.l;\n      const paddingVertical = padding.t + padding.b;\n\n      const paddingStyle: StyleObject = {\n        marginRight: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\n        marginBottom: paddingRelative ? -paddingVertical : 0,\n        marginLeft: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\n        top: paddingRelative ? -padding.t : 0,\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\n        width: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\n      };\n      const viewportStyle: StyleObject = {\n        paddingTop: paddingRelative ? padding.t : 0,\n        paddingRight: paddingRelative ? padding.r : 0,\n        paddingBottom: paddingRelative ? padding.b : 0,\n        paddingLeft: paddingRelative ? padding.l : 0,\n      };\n\n      // if there is no padding element apply the style to the viewport element instead\n      style(_padding || _viewport, paddingStyle);\n      style(_viewport, viewportStyle);\n\n      setState({\n        _padding: padding,\n        _paddingAbsolute: !paddingRelative,\n        _viewportPaddingStyle: _padding\n          ? viewportStyle\n          : assignDeep({}, paddingStyle, viewportStyle),\n      });\n    }\n\n    return {\n      _paddingStyleChanged: paddingStyleChanged,\n    };\n  };\n};\n", "import {\n  createCache,\n  attr,\n  style,\n  scrollSize,\n  fractionalSize,\n  equalWH,\n  clientSize,\n  equalXY,\n  attrClass,\n  noop,\n} from '~/support';\nimport { getEnvironment } from '~/environment';\nimport {\n  dataAttributeHost,\n  dataAttributeHostOverflowX,\n  dataAttributeHostOverflowY,\n  dataValueHostScrollbarHidden,\n  dataValueHostOverflowVisible,\n  dataValueViewportScrollbarHidden,\n  dataValueViewportOverflowVisible,\n  dataAttributeViewport,\n  dataAttributePadding,\n  dataValuePaddingOverflowVisible,\n} from '~/classnames';\nimport { getPlugins, scrollbarsHidingPluginName } from '~/plugins';\nimport type { WH, XY } from '~/support';\nimport type {\n  ScrollbarsHidingPluginInstance,\n  ArrangeViewport,\n  UndoArrangeViewport,\n} from '~/plugins/scrollbarsHidingPlugin';\nimport type { StyleObject, OverflowStyle } from '~/typings';\nimport type { OverflowBehavior } from '~/options';\nimport type { CreateStructureUpdateSegment } from '~/setups/structureSetup/structureSetup.update';\n\nexport interface ViewportOverflowState {\n  _scrollbarsHideOffset: XY<number>;\n  _scrollbarsHideOffsetArrange: XY<boolean>;\n  _overflowScroll: XY<boolean>;\n  _overflowStyle: XY<OverflowStyle>;\n}\n\nexport type GetViewportOverflowState = (\n  showNativeOverlaidScrollbars: boolean,\n  viewportStyleObj?: StyleObject\n) => ViewportOverflowState;\n\nexport type HideNativeScrollbars = (\n  viewportOverflowState: ViewportOverflowState,\n  directionIsRTL: boolean,\n  viewportArrange: boolean,\n  viewportStyleObj: StyleObject\n) => void;\n\nconst { max } = Math;\nconst max0 = max.bind(0, 0);\nconst strVisible = 'visible';\nconst strHidden = 'hidden';\nconst overlaidScrollbarsHideOffset = 42;\nconst whCacheOptions = {\n  _equal: equalWH,\n  _initialValue: { w: 0, h: 0 },\n};\nconst xyCacheOptions = {\n  _equal: equalXY,\n  _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\n};\n\nconst getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\n  const tollerance = window.devicePixelRatio % 1 !== 0 ? 1 : 0;\n  const amount = {\n    w: max0(viewportScrollSize.w - viewportClientSize.w),\n    h: max0(viewportScrollSize.h - viewportClientSize.h),\n  };\n\n  return {\n    w: amount.w > tollerance ? amount.w : 0,\n    h: amount.h > tollerance ? amount.h : 0,\n  };\n};\n\nconst overflowIsVisible = (overflowBehavior: string) => overflowBehavior.indexOf(strVisible) === 0;\n\n/**\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  state\n) => {\n  const [getState, setState] = state;\n  const {\n    _host,\n    _padding,\n    _viewport,\n    _viewportArrange,\n    _viewportIsTarget,\n    _viewportAddRemoveClass,\n    _isBody,\n    _windowElm,\n  } = structureSetupElements;\n  const {\n    _nativeScrollbarsSize,\n    _flexboxGlue,\n    _nativeScrollbarsHiding,\n    _nativeScrollbarsOverlaid,\n  } = getEnvironment();\n  const scrollbarsHidingPlugin = getPlugins()[scrollbarsHidingPluginName] as\n    | ScrollbarsHidingPluginInstance\n    | undefined;\n  const doViewportArrange =\n    !_viewportIsTarget &&\n    !_nativeScrollbarsHiding &&\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\n\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\n    whCacheOptions,\n    fractionalSize.bind(0, _viewport)\n  );\n\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\n    WH<number>\n  >(whCacheOptions, scrollSize.bind(0, _viewport));\n\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\n    createCache<WH<number>>(whCacheOptions);\n\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\n\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\n\n  /**\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\n   * @param viewportOverflowState The current overflow state.\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\n   */\n  const fixFlexboxGlue = (\n    viewportOverflowState: ViewportOverflowState,\n    heightIntrinsic: boolean\n  ) => {\n    style(_viewport, {\n      height: '',\n    });\n\n    if (heightIntrinsic) {\n      const { _paddingAbsolute, _padding: padding } = getState();\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\n      const fSize = fractionalSize(_host);\n      const hostClientSize = clientSize(_host);\n\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\n      const isContentBox = style(_viewport, 'boxSizing') === 'content-box';\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\n\n      style(_viewport, {\n        height:\n          hostClientSize.h +\n          fSize.h +\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\n          paddingVertical,\n      });\n    }\n  };\n\n  /**\n   * Gets the current overflow state of the viewport.\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\n   * @returns A object which contains informations about the current overflow state.\n   */\n  const getViewportOverflowState: GetViewportOverflowState = (\n    showNativeOverlaidScrollbars,\n    viewportStyleObj?\n  ) => {\n    const arrangeHideOffset =\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\n    const getStatePerAxis = (\n      styleKey: string,\n      isOverlaid: boolean,\n      nativeScrollbarSize: number\n    ) => {\n      const overflowStyle = style(_viewport, styleKey);\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\n      const objectPrefferedOverflowStyle = viewportStyleObj\n        ? viewportStyleObj[styleKey]\n        : overflowStyle;\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\n      const scrollbarsHideOffset =\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\n\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\n        overflowStyle: OverflowStyle,\n        overflowScroll: boolean,\n        scrollbarsHideOffset: number,\n        scrollbarsHideOffsetArrange: boolean\n      ];\n    };\n\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\n      getStatePerAxis('overflowX', _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\n      getStatePerAxis('overflowY', _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\n\n    return {\n      _overflowStyle: {\n        x: xOverflowStyle,\n        y: yOverflowStyle,\n      },\n      _overflowScroll: {\n        x: xOverflowScroll,\n        y: yOverflowScroll,\n      },\n      _scrollbarsHideOffset: {\n        x: xScrollbarsHideOffset,\n        y: yScrollbarsHideOffset,\n      },\n      _scrollbarsHideOffsetArrange: {\n        x: xScrollbarsHideOffsetArrange,\n        y: yScrollbarsHideOffsetArrange,\n      },\n    };\n  };\n\n  /**\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\n   * @param overflowAmount The overflow amount.\n   * @param overflow The overflow behavior according to the options.\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\n   * @returns A object which represents the newly set overflow state.\n   */\n  const setViewportOverflowState = (\n    showNativeOverlaidScrollbars: boolean,\n    hasOverflow: XY<boolean>,\n    overflowOption: XY<OverflowBehavior>,\n    viewportStyleObj: StyleObject\n  ): ViewportOverflowState => {\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\n      const overflowVisible = overflowIsVisible(behavior);\n      const overflowVisibleBehavior =\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\n      return [\n        hasOverflowAxis && !overflowVisible ? behavior : '',\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\n      ];\n    };\n\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\n\n    viewportStyleObj.overflowX = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\n    viewportStyleObj.overflowY = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\n\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\n  };\n\n  /**\n   * Hides the native scrollbars according to the passed parameters.\n   * @param viewportOverflowState The viewport overflow state.\n   * @param directionIsRTL Whether the direction is RTL or not.\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\n   */\n  const hideNativeScrollbars: HideNativeScrollbars = (\n    viewportOverflowState,\n    directionIsRTL,\n    viewportArrange,\n    viewportStyleObj\n  ) => {\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n    const { _viewportPaddingStyle: viewportPaddingStyle } = getState();\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? 'marginLeft' : 'marginRight';\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\n      ? 'paddingLeft'\n      : 'paddingRight';\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\n    const verticalMarginValue = viewportPaddingStyle.marginBottom as number;\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\n    const verticalPaddingValue = viewportPaddingStyle.paddingBottom as number;\n\n    // horizontal\n    viewportStyleObj.width = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\n\n    // vertical\n    viewportStyleObj.marginBottom = -hideOffsetX + verticalMarginValue;\n\n    // viewport arrange additional styles\n    if (viewportArrange) {\n      viewportStyleObj[viewportHorizontalPaddingKey] =\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\n      viewportStyleObj.paddingBottom = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\n    }\n  };\n\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\n        doViewportArrange,\n        _flexboxGlue,\n        _viewport,\n        _viewportArrange,\n        getState,\n        getViewportOverflowState,\n        hideNativeScrollbars\n      )\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\n\n  return (updateHints, checkOption, force) => {\n    const {\n      _sizeChanged,\n      _hostMutation,\n      _contentMutation,\n      _paddingStyleChanged,\n      _heightIntrinsicChanged,\n      _directionChanged,\n    } = updateHints;\n    const { _heightIntrinsic, _directionIsRTL } = getState();\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\n      checkOption<boolean>('showNativeOverlaidScrollbars');\n    const [overflow, overflowChanged] = checkOption<XY<OverflowBehavior>>('overflow');\n\n    const showNativeOverlaidScrollbars =\n      showNativeOverlaidScrollbarsOption &&\n      _nativeScrollbarsOverlaid.x &&\n      _nativeScrollbarsOverlaid.y;\n    const adjustFlexboxGlue =\n      !_viewportIsTarget &&\n      !_flexboxGlue &&\n      (_sizeChanged ||\n        _contentMutation ||\n        _hostMutation ||\n        showNativeOverlaidScrollbarsChanged ||\n        _heightIntrinsicChanged);\n    const overflowXVisible = overflowIsVisible(overflow.x);\n    const overflowYVisible = overflowIsVisible(overflow.y);\n    const overflowVisible = overflowXVisible || overflowYVisible;\n\n    let sizeFractionCache = getCurrentSizeFraction(force);\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(force);\n    let overflowAmuntCache = getCurrentOverflowAmountCache(force);\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(force);\n\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\n\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\n      _viewportAddRemoveClass(\n        dataValueViewportScrollbarHidden,\n        dataValueHostScrollbarHidden,\n        !showNativeOverlaidScrollbars\n      );\n    }\n\n    if (adjustFlexboxGlue) {\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\n    }\n\n    if (\n      _sizeChanged ||\n      _paddingStyleChanged ||\n      _contentMutation ||\n      _directionChanged ||\n      showNativeOverlaidScrollbarsChanged\n    ) {\n      if (overflowVisible) {\n        _viewportAddRemoveClass(\n          dataValueViewportOverflowVisible,\n          dataValueHostOverflowVisible,\n          false\n        );\n      }\n\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\n        showNativeOverlaidScrollbars,\n        _directionIsRTL,\n        preMeasureViewportOverflowState\n      );\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(force));\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\n        updateViewportScrollSizeCache(force));\n      const viewportclientSize = clientSize(_viewport);\n      let arrangedViewportScrollSize = viewportScrollSize;\n      let arrangedViewportClientSize = viewportclientSize;\n\n      redoViewportArrange();\n\n      // if re measure is required (only required if content arrange strategy is used)\n      if (\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\n        undoViewportArrangeOverflowState &&\n        !showNativeOverlaidScrollbars &&\n        arrangeViewport(\n          undoViewportArrangeOverflowState,\n          viewportScrollSize,\n          sizeFraction,\n          _directionIsRTL\n        )\n      ) {\n        arrangedViewportClientSize = clientSize(_viewport);\n        arrangedViewportScrollSize = scrollSize(_viewport);\n      }\n\n      const overflowAmountScrollSize = {\n        w: max0(max(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\n        h: max0(max(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\n      };\n      const overflowAmountClientSize = {\n        w: max0(\n          (viewportIsTargetBody\n            ? _windowElm.innerWidth\n            : arrangedViewportClientSize.w + max0(viewportclientSize.w - viewportScrollSize.w)) +\n            sizeFraction.w\n        ),\n        h: max0(\n          (viewportIsTargetBody\n            ? _windowElm.innerHeight + sizeFraction.h\n            : arrangedViewportClientSize.h + max0(viewportclientSize.h - viewportScrollSize.h)) +\n            sizeFraction.h\n        ),\n      };\n\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\n      overflowAmuntCache = updateOverflowAmountCache(\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\n        force\n      );\n    }\n\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\n    const hasOverflow = {\n      x: overflowAmount.w > 0,\n      y: overflowAmount.h > 0,\n    };\n    const removeClipping =\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\n\n    if (\n      _paddingStyleChanged ||\n      _directionChanged ||\n      sizeFractionChanged ||\n      viewportScrollSizeChanged ||\n      overflowEdgeChanged ||\n      overflowAmountChanged ||\n      overflowChanged ||\n      showNativeOverlaidScrollbarsChanged ||\n      adjustFlexboxGlue\n    ) {\n      const viewportStyle: StyleObject = {\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n        width: '',\n        overflowY: '',\n        overflowX: '',\n      };\n      const viewportOverflowState = setViewportOverflowState(\n        showNativeOverlaidScrollbars,\n        hasOverflow,\n        overflow,\n        viewportStyle\n      );\n      const viewportArranged = arrangeViewport(\n        viewportOverflowState,\n        viewportScrollSize,\n        sizeFraction,\n        _directionIsRTL\n      );\n\n      if (!_viewportIsTarget) {\n        hideNativeScrollbars(\n          viewportOverflowState,\n          _directionIsRTL,\n          viewportArranged,\n          viewportStyle\n        );\n      }\n\n      if (adjustFlexboxGlue) {\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\n      }\n\n      if (_viewportIsTarget) {\n        attr(_host, dataAttributeHostOverflowX, viewportStyle.overflowX as string);\n        attr(_host, dataAttributeHostOverflowY, viewportStyle.overflowY as string);\n      } else {\n        style(_viewport, viewportStyle);\n      }\n    }\n\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\n    if (!_viewportIsTarget) {\n      attrClass(\n        _viewport,\n        dataAttributeViewport,\n        dataValueViewportOverflowVisible,\n        overflowVisible\n      );\n    }\n\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\n    );\n\n    setState({\n      _overflowStyle: overflowStyle,\n      _overflowEdge: {\n        x: overflowEdge.w,\n        y: overflowEdge.h,\n      },\n      _overflowAmount: {\n        x: overflowAmount.w,\n        y: overflowAmount.h,\n      },\n      _hasOverflow: hasOverflow,\n    });\n\n    return {\n      _overflowStyleChanged: overflowStyleChanged,\n      _overflowEdgeChanged: overflowEdgeChanged,\n      _overflowAmountChanged: overflowAmountChanged,\n    };\n  };\n};\n", "import { each, scrollLeft, scrollTop, assignDeep, keys } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport { dataValueHostUpdating } from '~/classnames';\nimport {\n  createTrinsicUpdateSegment,\n  createPaddingUpdateSegment,\n  createOverflowUpdateSegment,\n} from '~/setups/structureSetup/updateSegments';\nimport type { SetupState, SetupUpdateSegment, SetupUpdateCheckOption } from '~/setups';\nimport type { StructureSetupState } from '~/setups/structureSetup';\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\n\nexport type CreateStructureUpdateSegment = (\n  structureSetupElements: StructureSetupElementsObj,\n  state: SetupState<StructureSetupState>\n) => StructureSetupUpdateSegment;\n\nexport type StructureSetupUpdateSegment = SetupUpdateSegment<StructureSetupUpdateHints>;\n\nexport type StructureSetupUpdate = (\n  checkOption: SetupUpdateCheckOption,\n  updateHints: Partial<StructureSetupUpdateHints>,\n  force?: boolean\n) => StructureSetupUpdateHints;\n\nexport interface StructureSetupUpdateHints {\n  _sizeChanged: boolean;\n  _directionChanged: boolean;\n  _heightIntrinsicChanged: boolean;\n  _overflowEdgeChanged: boolean;\n  _overflowAmountChanged: boolean;\n  _overflowStyleChanged: boolean;\n  _paddingStyleChanged: boolean;\n  _hostMutation: boolean;\n  _contentMutation: boolean;\n}\n\nconst prepareUpdateHints = <T extends StructureSetupUpdateHints>(\n  leading: Required<T>,\n  adaptive?: Partial<T>,\n  force?: boolean\n): Required<T> => {\n  const result = {};\n  const finalAdaptive = adaptive || {};\n  const objKeys = keys(leading).concat(keys(finalAdaptive));\n\n  each(objKeys, (key) => {\n    const leadingValue = leading[key];\n    const adaptiveValue = finalAdaptive[key];\n    result[key] = !!(force || leadingValue || adaptiveValue);\n  });\n\n  return result as Required<T>;\n};\n\nexport const createStructureSetupUpdate = (\n  structureSetupElements: StructureSetupElementsObj,\n  state: SetupState<StructureSetupState>\n): StructureSetupUpdate => {\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = structureSetupElements;\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\n  const doViewportArrange =\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n\n  const updateSegments: StructureSetupUpdateSegment[] = [\n    createTrinsicUpdateSegment(structureSetupElements, state),\n    createPaddingUpdateSegment(structureSetupElements, state),\n    createOverflowUpdateSegment(structureSetupElements, state),\n  ];\n\n  return (\n    checkOption: SetupUpdateCheckOption,\n    updateHints: Partial<StructureSetupUpdateHints>,\n    force?: boolean\n  ) => {\n    const initialUpdateHints = prepareUpdateHints(\n      assignDeep(\n        {\n          _sizeChanged: false,\n          _paddingStyleChanged: false,\n          _directionChanged: false,\n          _heightIntrinsicChanged: false,\n          _overflowEdgeChanged: false,\n          _overflowAmountChanged: false,\n          _overflowStyleChanged: false,\n          _hostMutation: false,\n          _contentMutation: false,\n        },\n        updateHints\n      ),\n      {},\n      force\n    );\n    const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\n    const scrollOffsetX = adjustScrollOffset && scrollLeft(_viewport);\n    const scrollOffsetY = adjustScrollOffset && scrollTop(_viewport);\n    _viewportAddRemoveClass('', dataValueHostUpdating, true);\n\n    let adaptivedUpdateHints: Required<StructureSetupUpdateHints> = initialUpdateHints;\n    each(updateSegments, (updateSegment) => {\n      adaptivedUpdateHints = prepareUpdateHints<StructureSetupUpdateHints>(\n        adaptivedUpdateHints,\n        updateSegment(adaptivedUpdateHints, checkOption, !!force) || {},\n        force\n      );\n    });\n\n    scrollLeft(_viewport, scrollOffsetX);\n    scrollTop(_viewport, scrollOffsetY);\n    _viewportAddRemoveClass('', dataValueHostUpdating);\n\n    if (!_viewportIsTarget) {\n      scrollLeft(_target, 0);\n      scrollTop(_target, 0);\n    }\n\n    return adaptivedUpdateHints;\n  };\n};\n", "import {\n  each,\n  noop,\n  debounce,\n  indexOf,\n  isString,\n  MutationObserverConstructor,\n  isEmptyArray,\n  on,\n  attr,\n  is,\n  find,\n  push,\n  from,\n  runEachAndClear,\n} from '~/support';\n\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\n\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\n\ninterface DOMObserverOptionsBase {\n  _attributes?: string[];\n  /**\n   * A function which can ignore a changed attribute if it returns true.\n   * for DOMTargetObserver this applies to the changes to the observed target\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\n   */\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\n}\n\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\n  _nestedTargetSelector?: string;\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\n}\n\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\n  /**\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\n   */\n  _styleChangingAttributes?: string[];\n}\n\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\n\nexport type DOMObserverEventContentChange =\n  | Array<ContentChangeArrayItem>\n  | false\n  | null\n  | undefined;\n\nexport type DOMObserverIgnoreContentChange = (\n  mutation: MutationRecord,\n  isNestedTarget: boolean,\n  domObserverTarget: HTMLElement,\n  domObserverOptions?: DOMContentObserverOptions\n) => boolean;\n\nexport type DOMObserverIgnoreTargetChange = (\n  target: Node,\n  attributeName: string,\n  oldAttributeValue: string | null,\n  newAttributeValue: string | null\n) => boolean;\n\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverCallback\n  : DOMTargetObserverCallback;\n\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverOptions\n  : DOMTargetObserverOptions;\n\nexport type DOMObserver<ContentObserver extends boolean> = [\n  destroy: () => void,\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\n];\n\ntype EventContentChangeUpdateElement = (\n  getElements?: (selector: string) => Node[],\n  removed?: boolean\n) => void;\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\n\n/**\n * Creates a set of helper functions to observe events of elements inside the target element.\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\n * @param callback Callback which is called if one of the elements emits the corresponding event.\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\n */\nconst createEventContentChange = (\n  target: HTMLElement,\n  callback: (...args: any) => any,\n  eventContentChange?: DOMObserverEventContentChange\n): EventContentChange => {\n  let map: WeakMap<Node, (() => any)[]> | undefined; // weak map to prevent memory leak for detached elements\n  let destroyed = false;\n  const destroy = () => {\n    destroyed = true;\n  };\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\n    if (eventContentChange) {\n      const eventElmList = eventContentChange.reduce<Array<[Node[], string]>>((arr, item) => {\n        if (item) {\n          const [selector, eventNames] = item;\n          const elements =\n            eventNames &&\n            selector &&\n            (getElements ? getElements(selector) : find(selector, target));\n\n          if (elements && elements.length && eventNames && isString(eventNames)) {\n            push(arr, [elements, eventNames.trim()], true);\n          }\n        }\n        return arr;\n      }, []);\n\n      each(eventElmList, (item) =>\n        each(item[0], (elm) => {\n          const eventNames = item[1];\n          const entries = map!.get(elm) || [];\n          const isTargetChild = target.contains(elm);\n\n          if (isTargetChild) {\n            const off = on(elm, eventNames, (event: Event) => {\n              if (destroyed) {\n                off();\n                map!.delete(elm);\n              } else {\n                callback(event);\n              }\n            });\n            map!.set(elm, push(entries, off));\n          } else {\n            runEachAndClear(entries);\n            map!.delete(elm);\n          }\n        })\n      );\n    }\n  };\n\n  if (eventContentChange) {\n    map = new WeakMap();\n    updateElements();\n  }\n\n  return [destroy, updateElements];\n};\n\n/**\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\n * @param target The element which shall be observed.\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\n * @param callback The callback which gets called if a change was detected.\n * @param options The options for DOM change detection.\n * @returns A object which represents the instance of the DOM observer.\n */\nexport const createDOMObserver = <ContentObserver extends boolean>(\n  target: HTMLElement,\n  isContentObserver: ContentObserver,\n  callback: DOMObserverCallback<ContentObserver>,\n  options?: DOMObserverOptions<ContentObserver>\n): DOMObserver<ContentObserver> => {\n  let isConnected = false;\n  const {\n    _attributes,\n    _styleChangingAttributes,\n    _eventContentChange,\n    _nestedTargetSelector,\n    _ignoreTargetChange,\n    _ignoreContentChange,\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\n  const debouncedEventContentChange = debounce(\n    () => {\n      if (isConnected) {\n        (callback as DOMContentObserverCallback)(true);\n      }\n    },\n    { _timeout: 33, _maxDelay: 99 }\n  );\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\n    target,\n    debouncedEventContentChange,\n    _eventContentChange\n  );\n\n  // MutationObserver\n  const finalAttributes = _attributes || [];\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\n  const observedAttributes = finalAttributes.concat(finalStyleChangingAttributes);\n  const observerCallback = (\n    mutations: MutationRecord[],\n    fromRecords?: true\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\n    const ignoreTargetChange = _ignoreTargetChange || noop;\n    const ignoreContentChange = _ignoreContentChange || noop;\n    const totalChangedNodes: Set<Node> = new Set();\n    const targetChangedAttrs: Set<string> = new Set();\n    let targetStyleChanged = false;\n    let contentChanged = false;\n    let childListChanged = false;\n\n    each(mutations, (mutation) => {\n      const {\n        attributeName,\n        target: mutationTarget,\n        type,\n        oldValue,\n        addedNodes,\n        removedNodes,\n      } = mutation;\n      const isAttributesType = type === 'attributes';\n      const isChildListType = type === 'childList';\n      const targetIsMutationTarget = target === mutationTarget;\n      const attributeValue =\n        isAttributesType && isString(attributeName)\n          ? attr(mutationTarget as HTMLElement, attributeName!)\n          : 0;\n      const attributeChanged = attributeValue !== 0 && oldValue !== attributeValue;\n      const styleChangingAttrChanged =\n        indexOf(finalStyleChangingAttributes, attributeName) > -1 && attributeChanged;\n\n      // if is content observer and something changed in children\n      if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\n        const notOnlyAttrChanged = !isAttributesType;\n        const contentAttrChanged = isAttributesType && attributeChanged;\n        const isNestedTarget =\n          contentAttrChanged && _nestedTargetSelector && is(mutationTarget, _nestedTargetSelector);\n        const baseAssertion = isNestedTarget\n          ? !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\n          : notOnlyAttrChanged || contentAttrChanged;\n        const contentFinalChanged =\n          baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\n\n        each(addedNodes, (node) => totalChangedNodes.add(node));\n        each(removedNodes, (node) => totalChangedNodes.add(node));\n\n        contentChanged = contentChanged || contentFinalChanged;\n        childListChanged = childListChanged || isChildListType;\n      }\n      // if is target observer and target attr changed\n      if (\n        !isContentObserver &&\n        targetIsMutationTarget &&\n        attributeChanged &&\n        !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\n      ) {\n        targetChangedAttrs.add(attributeName!);\n        targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\n      }\n    });\n\n    // adds / removes the new elements from the event content change\n    if (totalChangedNodes.size > 0) {\n      updateEventContentChangeElements((selector: string) =>\n        from(totalChangedNodes).reduce<Node[]>((arr, node) => {\n          push(arr, find(selector, node));\n          return is(node, selector) ? push(arr, node) : arr;\n        }, [])\n      );\n    }\n\n    if (isContentObserver) {\n      !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\n      return [false] as Parameters<DOMObserverCallback<ContentObserver>>;\n    }\n\n    if (targetChangedAttrs.size > 0 || targetStyleChanged) {\n      const args: Parameters<DOMTargetObserverCallback> = [\n        from(targetChangedAttrs),\n        targetStyleChanged,\n      ];\n      !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\n\n      return args as Parameters<DOMObserverCallback<ContentObserver>>;\n    }\n  };\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!((mutations) =>\n    observerCallback(mutations)\n  );\n\n  // Connect\n  mutationObserver.observe(target, {\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: observedAttributes,\n    subtree: isContentObserver,\n    childList: isContentObserver,\n    characterData: isContentObserver,\n  });\n  isConnected = true;\n\n  return [\n    () => {\n      if (isConnected) {\n        destroyEventContentChange();\n        mutationObserver.disconnect();\n        isConnected = false;\n      }\n    },\n    () => {\n      if (isConnected) {\n        debouncedEventContentChange._flush();\n\n        const records = mutationObserver.takeRecords();\n        return !isEmptyArray(records) && observerCallback(records, true);\n      }\n    },\n  ];\n};\n", "import {\r\n  createCache,\r\n  createDOM,\r\n  scrollLeft,\r\n  scrollTop,\r\n  runEachAndClear,\r\n  removeElements,\r\n  on,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  isArray,\r\n  isBoolean,\r\n  removeClass,\r\n  isObject,\r\n  stopPropagation,\r\n  appendChildren,\r\n  directionIsRTL,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getPlugins, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPluginInstance } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  _direction?: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = [destroy: () => void, append: () => void];\r\n\r\nconst scrollAmount = 3333333;\r\nconst domRectHasDimensions = (rect?: DOMRectReadOnly) => rect && (rect.height || rect.width);\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _direction: observeDirectionChange = false, _appear: observeAppearChange = false } =\r\n    options || {};\r\n  const sizeObserverPlugin = getPlugins()[sizeObserverPluginName] as\r\n    | SizeObserverPluginInstance\r\n    | undefined;\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const baseElements = createDOM(\r\n    `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n  );\r\n  const sizeObserver = baseElements[0] as HTMLElement;\r\n  const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n  const getIsDirectionRTL = directionIsRTL.bind(0, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | undefined>({\r\n    _initialValue: undefined,\r\n    _alwaysUpdateValues: true,\r\n    _equal: (currVal, newVal) =>\r\n      !(\r\n        !currVal || // if no initial value\r\n        // if from display: none to display: block\r\n        (!domRectHasDimensions(currVal) && domRectHasDimensions(newVal))\r\n      ),\r\n  });\r\n  const onSizeChangedCallbackProxy = (\r\n    sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry[] | Event | boolean\r\n  ) => {\r\n    const isResizeObserverCall =\r\n      isArray(sizeChangedContext) &&\r\n      sizeChangedContext.length > 0 &&\r\n      isObject(sizeChangedContext[0]);\r\n\r\n    const hasDirectionCache =\r\n      !isResizeObserverCall && isBoolean((sizeChangedContext as CacheValues<boolean>)[0]);\r\n\r\n    let skip = false;\r\n    let appear: boolean | number | undefined = false;\r\n    let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n    // if triggered from RO.\r\n    if (isResizeObserverCall) {\r\n      const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n        (sizeChangedContext as ResizeObserverEntry[]).pop()!.contentRect\r\n      );\r\n      const hasDimensions = domRectHasDimensions(currRContentRect);\r\n      const hadDimensions = domRectHasDimensions(prevContentRect);\r\n      skip = !prevContentRect || !hasDimensions; // skip on initial RO. call or if display is none\r\n      appear = !hadDimensions && hasDimensions;\r\n\r\n      doDirectionScroll = !skip; // direction scroll when not skipping\r\n    }\r\n    // else if its triggered with DirectionCache\r\n    else if (hasDirectionCache) {\r\n      [, doDirectionScroll] = sizeChangedContext as CacheValues<boolean>; // direction scroll when DirectionCache changed, false otherwise\r\n    }\r\n    // else if it triggered with appear from polyfill\r\n    else {\r\n      appear = sizeChangedContext === true;\r\n    }\r\n\r\n    if (observeDirectionChange && doDirectionScroll) {\r\n      const rtl = hasDirectionCache\r\n        ? (sizeChangedContext as CacheValues<boolean>)[0]\r\n        : directionIsRTL(sizeObserver);\r\n      scrollLeft(\r\n        sizeObserver,\r\n        rtl\r\n          ? rtlScrollBehavior.n\r\n            ? -scrollAmount\r\n            : rtlScrollBehavior.i\r\n            ? 0\r\n            : scrollAmount\r\n          : scrollAmount\r\n      );\r\n      scrollTop(sizeObserver, scrollAmount);\r\n    }\r\n\r\n    if (!skip) {\r\n      onSizeChangedCallback({\r\n        _sizeChanged: !hasDirectionCache,\r\n        _directionIsRTLCache: hasDirectionCache\r\n          ? (sizeChangedContext as CacheValues<boolean>)\r\n          : undefined,\r\n        _appear: !!appear,\r\n      });\r\n    }\r\n  };\r\n  const offListeners: (() => void)[] = [];\r\n  let appearCallback: ((...args: any) => any) | false = observeAppearChange\r\n    ? onSizeChangedCallbackProxy\r\n    : false;\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(sizeObserver);\r\n    },\r\n    () => {\r\n      if (ResizeObserverConstructor) {\r\n        const resizeObserverInstance = new ResizeObserverConstructor(onSizeChangedCallbackProxy);\r\n        resizeObserverInstance.observe(listenerElement);\r\n        push(offListeners, () => {\r\n          resizeObserverInstance.disconnect();\r\n        });\r\n      } else if (sizeObserverPlugin) {\r\n        const [pluginAppearCallback, pluginOffListeners] = sizeObserverPlugin._(\r\n          listenerElement,\r\n          onSizeChangedCallbackProxy,\r\n          observeAppearChange\r\n        );\r\n        appearCallback = pluginAppearCallback;\r\n        push(offListeners, pluginOffListeners);\r\n      }\r\n\r\n      if (observeDirectionChange) {\r\n        const [updateDirectionIsRTLCache] = createCache(\r\n          {\r\n            _initialValue: undefined,\r\n          },\r\n          getIsDirectionRTL\r\n        );\r\n\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'scroll', (event: Event) => {\r\n            const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n            const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n              directionIsRTLCacheValues;\r\n            if (directionIsRTLCacheChanged) {\r\n              removeClass(listenerElement, 'ltr rtl');\r\n              if (directionIsRTLCache) {\r\n                addClass(listenerElement, 'rtl');\r\n              } else {\r\n                addClass(listenerElement, 'ltr');\r\n              }\r\n\r\n              onSizeChangedCallbackProxy([\r\n                !!directionIsRTLCache,\r\n                directionIsRTLCacheChanged,\r\n                directionIsRTLCachePrevious,\r\n              ]);\r\n            }\r\n\r\n            stopPropagation(event);\r\n          })\r\n        );\r\n      }\r\n\r\n      // appearCallback is always needed on scroll-observer strategy to reset it\r\n      if (appearCallback) {\r\n        addClass(sizeObserver, classNameSizeObserverAppear);\r\n        push(\r\n          offListeners,\r\n          on(sizeObserver, 'animationstart', appearCallback, {\r\n            // Fire only once for \"CSS is ready\" event if ResizeObserver strategy is used\r\n            _once: !!ResizeObserverConstructor,\r\n          })\r\n        );\r\n      }\r\n\r\n      if (ResizeObserverConstructor || sizeObserverPlugin) {\r\n        appendChildren(target, sizeObserver);\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  removeElements,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  destroy: () => void,\r\n  append: () => void,\r\n  update: () => void | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\nconst isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n  (ioEntryOrSize as WH<number>).h === 0 ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n  (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const offListeners: (() => void)[] = [];\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue?: IntersectionObserverEntry | WH<number>,\r\n    fromRecords?: true\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n\r\n      if (heightIntrinsicChanged) {\r\n        !fromRecords && onTrinsicChangedCallback(heightIntrinsic);\r\n        return [heightIntrinsic];\r\n      }\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    entries: IntersectionObserverEntry[],\r\n    fromRecords?: true\r\n  ) => {\r\n    if (entries && entries.length > 0) {\r\n      return triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n    }\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      runEachAndClear(offListeners);\r\n      removeElements(trinsicObserver);\r\n    },\r\n    () => {\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          (entries) => intersectionObserverCallback(entries),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(offListeners, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        const [destroySizeObserver, appendSizeObserver] = createSizeObserver(\r\n          trinsicObserver,\r\n          onSizeChanged\r\n        );\r\n        push(offListeners, destroySizeObserver);\r\n        appendSizeObserver();\r\n        onSizeChanged();\r\n      }\r\n\r\n      appendChildren(target, trinsicObserver);\r\n    },\r\n    () => {\r\n      if (intersectionObserverInstance) {\r\n        return intersectionObserverCallback(intersectionObserverInstance.takeRecords(), true);\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import {\r\n  debounce,\r\n  isArray,\r\n  isNumber,\r\n  each,\r\n  indexOf,\r\n  isString,\r\n  attr,\r\n  removeAttr,\r\n  keys,\r\n  liesBetween,\r\n  scrollSize,\r\n  equalWH,\r\n  createCache,\r\n  fractionalSize,\r\n  isFunction,\r\n  ResizeObserverConstructor,\r\n  closest,\r\n  assignDeep,\r\n  push,\r\n  scrollLeft,\r\n  scrollTop,\r\n  noop,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  classNameScrollbar,\r\n  dataValueViewportArrange,\r\n  dataAttributeViewport,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport { createSizeObserver, createTrinsicObserver, createDOMObserver } from '~/observers';\r\nimport type { DOMObserver, SizeObserverCallbackParams } from '~/observers';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { SetupState, SetupUpdateCheckOption } from '~/setups';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type {\r\n  StructureSetupUpdate,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups/structureSetup/structureSetup.update';\r\n\r\nexport type StructureSetupObserversUpdate = (checkOption: SetupUpdateCheckOption) => void;\r\n\r\nexport type StructureSetupObservers = [\r\n  destroy: () => void,\r\n  appendElements: () => void,\r\n  updateObservers: () => Partial<StructureSetupUpdateHints>,\r\n  updateObserversOptions: StructureSetupObserversUpdate\r\n];\r\n\r\ntype ExcludeFromTuple<T extends readonly any[], E> = T extends [infer F, ...infer R]\r\n  ? [F] extends [E]\r\n    ? ExcludeFromTuple<R, E>\r\n    : [F, ...ExcludeFromTuple<R, E>]\r\n  : [];\r\n\r\nconst hostSelector = `[${dataAttributeHost}]`;\r\n\r\n// TODO: observer textarea attrs if textarea\r\n\r\nconst viewportSelector = `[${dataAttributeViewport}]`;\r\nconst viewportAttrsFromTarget = ['tabindex'];\r\nconst baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\nconst baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\nexport const createStructureSetupObservers = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  setState: SetupState<StructureSetupState>[1],\r\n  structureSetupUpdate: (\r\n    ...args: ExcludeFromTuple<Parameters<StructureSetupUpdate>, Parameters<StructureSetupUpdate>[0]>\r\n  ) => any\r\n): StructureSetupObservers => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let contentMutationObserver: DOMObserver<true> | undefined;\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffsetX = hasVpStyle && scrollLeft(_viewport);\r\n      const scrollOffsetY = hasVpStyle && scrollTop(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollLeft(_viewport, scrollOffsetX);\r\n      scrollTop(_viewport, scrollOffsetY);\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : baseStyleChangingAttrs.concat(baseStyleChangingAttrsTextarea);\r\n  const structureSetupUpdateWithDebouncedAdaptiveUpdateHints = debounce(structureSetupUpdate, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        keys(prevObj)\r\n          .concat(keys(currObj))\r\n          .reduce((obj, key) => {\r\n            obj[key] = prevObj[key] || currObj[key];\r\n            return obj;\r\n          }, {}),\r\n      ] as [Partial<StructureSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (indexOf(viewportAttrsFromTarget, attribute) > -1) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const onTrinsicChanged = (heightIntrinsicCache: CacheValues<boolean>, fromRecords?: true) => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n    setState({ _heightIntrinsic: heightIntrinsic });\r\n\r\n    !fromRecords && structureSetupUpdate(updateHints);\r\n    return updateHints;\r\n  };\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const updateFn =\r\n      !_sizeChanged || _appear\r\n        ? structureSetupUpdate\r\n        : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    let directionChanged = false;\r\n    if (_directionIsRTLCache) {\r\n      const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache;\r\n      directionChanged = directionIsRTLChanged;\r\n\r\n      setState({ _directionIsRTL: directionIsRTL });\r\n    }\r\n\r\n    updateFn({ _sizeChanged, _directionChanged: directionChanged });\r\n  };\r\n  const onContentMutation = (contentChangedThroughEvent: boolean, fromRecords?: true) => {\r\n    const [, contentSizeChanged] = updateContentSizeCache();\r\n    const updateHints: Partial<StructureSetupUpdateHints> = {\r\n      _contentMutation: contentSizeChanged,\r\n    };\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent\r\n      ? structureSetupUpdate\r\n      : structureSetupUpdateWithDebouncedAdaptiveUpdateHints;\r\n\r\n    if (contentSizeChanged) {\r\n      !fromRecords && updateFn(updateHints);\r\n    }\r\n    return updateHints;\r\n  };\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ) => {\r\n    const updateHints: Partial<StructureSetupUpdateHints> = { _hostMutation: targetStyleChanged };\r\n    if (targetStyleChanged) {\r\n      !fromRecords && structureSetupUpdateWithDebouncedAdaptiveUpdateHints(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    return updateHints;\r\n  };\r\n\r\n  const [destroyTrinsicObserver, appendTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [noop, noop, noop];\r\n  const [destroySizeObserver, appendSizeObserver] = !_viewportIsTarget\r\n    ? createSizeObserver(_host, onSizeChanged, {\r\n        _appear: true,\r\n        _direction: true,\r\n      })\r\n    : [noop, noop];\r\n  const [destroyHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs.concat(viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor(onSizeChanged.bind(0, { _sizeChanged: true }));\r\n\r\n  viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n  updateViewportAttrsFromHost();\r\n\r\n  return [\r\n    () => {\r\n      destroyTrinsicObserver();\r\n      destroySizeObserver();\r\n      contentMutationObserver && contentMutationObserver[0](); // destroy\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n      destroyHostMutationObserver();\r\n    },\r\n    () => {\r\n      // order is matter!\r\n      appendSizeObserver();\r\n      appendTrinsicObserver();\r\n    },\r\n    () => {\r\n      const updateHints: Partial<StructureSetupUpdateHints> = {};\r\n      const hostUpdateResult = updateHostMutationObserver();\r\n      const trinsicUpdateResult = updateTrinsicObserver();\r\n      const contentUpdateResult = contentMutationObserver && contentMutationObserver[1](); // update\r\n\r\n      if (hostUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onHostMutation.apply(\r\n            0,\r\n            push(hostUpdateResult, true) as [\r\n              ...updateResult: typeof hostUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (trinsicUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onTrinsicChanged.apply(\r\n            0,\r\n            push(trinsicUpdateResult as any[], true) as [\r\n              ...updateResult: typeof trinsicUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      if (contentUpdateResult) {\r\n        assignDeep(\r\n          updateHints,\r\n          onContentMutation.apply(\r\n            0,\r\n            push(contentUpdateResult, true) as [\r\n              ...updateResult: typeof contentUpdateResult,\r\n              fromRecords: true\r\n            ]\r\n          )\r\n        );\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    (checkOption) => {\r\n      const [ignoreMutation] = checkOption<string[] | null>('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = checkOption<string[] | null>('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = checkOption<Array<[string, string]> | null>(\r\n        'update.elementEvents'\r\n      );\r\n      const [debounceValue, debounceChanged] = checkOption<Array<number> | number | null>(\r\n        'update.debounce'\r\n      );\r\n      const updateContentMutationObserver = elementEventsChanged || attributesChanged;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (updateContentMutationObserver) {\r\n        if (contentMutationObserver) {\r\n          contentMutationObserver[1](); // update\r\n          contentMutationObserver[0](); // destroy\r\n        }\r\n        contentMutationObserver = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: contentMutationObserverAttr.concat(attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(target, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(target, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        structureSetupUpdateWithDebouncedAdaptiveUpdateHints._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import {\r\n  createEventListenerHub,\r\n  directionIsRTL,\r\n  isEmptyObject,\r\n  keys,\r\n  scrollLeft,\r\n  scrollTop,\r\n} from '~/support';\r\nimport { createState, createOptionCheck } from '~/setups/setups';\r\nimport { createStructureSetupElements } from '~/setups/structureSetup/structureSetup.elements';\r\nimport { createStructureSetupUpdate } from '~/setups/structureSetup/structureSetup.update';\r\nimport { createStructureSetupObservers } from '~/setups/structureSetup/structureSetup.observers';\r\nimport type { StructureSetupUpdateHints } from '~/setups/structureSetup/structureSetup.update';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { TRBL, XY, EventListener } from '~/support';\r\nimport type { PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { Setup } from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface StructureSetupStaticState {\r\n  _elements: StructureSetupElementsObj;\r\n  _appendElements: () => void;\r\n  _addOnUpdatedListener: (listener: EventListener<StructureSetupEventMap, 'u'>) => void;\r\n}\r\n\r\ntype StructureSetupEventMap = {\r\n  u: [updateHints: StructureSetupUpdateHints, changedOptions: PartialOptions, force: boolean];\r\n};\r\n\r\nconst initialXYNumber = { x: 0, y: 0 };\r\nconst createInitialStructureSetupUpdateState = (\r\n  elements: StructureSetupElementsObj\r\n): StructureSetupState => ({\r\n  _padding: {\r\n    t: 0,\r\n    r: 0,\r\n    b: 0,\r\n    l: 0,\r\n  },\r\n  _paddingAbsolute: false,\r\n  _viewportPaddingStyle: {\r\n    marginRight: 0,\r\n    marginBottom: 0,\r\n    marginLeft: 0,\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n    paddingLeft: 0,\r\n  },\r\n  _overflowEdge: initialXYNumber,\r\n  _overflowAmount: initialXYNumber,\r\n  _overflowStyle: {\r\n    x: 'hidden',\r\n    y: 'hidden',\r\n  },\r\n  _hasOverflow: {\r\n    x: false,\r\n    y: false,\r\n  },\r\n  _heightIntrinsic: false,\r\n  _directionIsRTL: directionIsRTL(elements._host),\r\n});\r\n\r\nexport const createStructureSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions\r\n): Setup<StructureSetupState, StructureSetupStaticState, [], boolean> => {\r\n  const checkOptionsFallback = createOptionCheck(options, {});\r\n  const [addEvent, removeEvent, triggerEvent] = createEventListenerHub<StructureSetupEventMap>();\r\n  const [elements, appendStructureElements, destroyElements] = createStructureSetupElements(target);\r\n  const state = createState(createInitialStructureSetupUpdateState(elements));\r\n  const [getState, setState] = state;\r\n  const updateStructure = createStructureSetupUpdate(elements, state);\r\n  const triggerUpdateEvent: (...args: StructureSetupEventMap['u']) => boolean = (\r\n    updateHints,\r\n    changedOptions,\r\n    force\r\n  ) => {\r\n    const truthyUpdateHints = keys(updateHints).some((key) => updateHints[key]);\r\n    const changed = truthyUpdateHints || !isEmptyObject(changedOptions) || force;\r\n    if (changed) {\r\n      triggerEvent('u', [updateHints, changedOptions, force]);\r\n    }\r\n    return changed;\r\n  };\r\n  const [destroyObservers, appendObserverElements, updateObservers, updateObserversOptions] =\r\n    createStructureSetupObservers(elements, setState, (updateHints) =>\r\n      triggerUpdateEvent(updateStructure(checkOptionsFallback, updateHints), {}, false)\r\n    );\r\n\r\n  const structureSetupState = getState.bind(0) as (() => StructureSetupState) &\r\n    StructureSetupStaticState;\r\n  structureSetupState._addOnUpdatedListener = (listener) => addEvent('u', listener);\r\n  structureSetupState._appendElements = () => {\r\n    const { _target, _viewport } = elements;\r\n    const initialScrollLeft = scrollLeft(_target);\r\n    const initialScrollTop = scrollTop(_target);\r\n\r\n    appendObserverElements();\r\n    appendStructureElements();\r\n\r\n    scrollLeft(_viewport, initialScrollLeft);\r\n    scrollTop(_viewport, initialScrollTop);\r\n  };\r\n  structureSetupState._elements = elements;\r\n\r\n  return [\r\n    (changedOptions, force?) => {\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      updateObserversOptions(checkOption);\r\n      return triggerUpdateEvent(\r\n        updateStructure(checkOption, updateObservers(), force),\r\n        changedOptions,\r\n        !!force\r\n      );\r\n    },\r\n    structureSetupState,\r\n    () => {\r\n      removeEvent();\r\n      destroyObservers();\r\n      destroyElements();\r\n    },\r\n  ];\r\n};\r\n", "import {\n  directionIsRTL,\n  getBoundingClientRect,\n  offsetSize,\n  on,\n  preventDefault,\n  runEachAndClear,\n  stopPropagation,\n  selfClearTimeout,\n  parent,\n  closest,\n  push,\n  attrClass,\n} from '~/support';\nimport { getPlugins, clickScrollPluginName } from '~/plugins';\nimport { getEnvironment } from '~/environment';\nimport {\n  classNameScrollbarHandle,\n  classNameScrollbarInteraction,\n  classNameScrollbarWheel,\n  dataAttributeHost,\n  dataValueHostScrollbarPressed,\n} from '~/classnames';\nimport type { XY } from '~/support';\nimport type { ClickScrollPluginInstance } from '~/plugins';\nimport type { ReadonlyOptions } from '~/options';\nimport type { StructureSetupState } from '~/setups';\nimport type {\n  ScrollbarsSetupElementsObj,\n  ScrollbarStructure,\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\n\nexport type ScrollbarsSetupEvents = (\n  scrollbarStructure: ScrollbarStructure,\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\n  documentElm: Document,\n  hostElm: HTMLElement,\n  scrollOffsetElm: HTMLElement,\n  isHorizontal?: boolean\n) => () => void;\n\nconst { round } = Math;\nconst getScale = (element: HTMLElement): XY<number> => {\n  const { width, height } = getBoundingClientRect(element);\n  const { w, h } = offsetSize(element);\n  return {\n    x: round(width) / w || 1,\n    y: round(height) / h || 1,\n  };\n};\nconst continuePointerDown = (\n  event: PointerEvent,\n  options: ReadonlyOptions,\n  isDragScroll: boolean\n) => {\n  const scrollbarOptions = options.scrollbars;\n  const { button, isPrimary, pointerType } = event;\n  const { pointers } = scrollbarOptions;\n  return (\n    button === 0 &&\n    isPrimary &&\n    scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\n    (pointers || []).includes(pointerType)\n  );\n};\nconst createRootClickStopPropagationEvents = (scrollbar: HTMLElement, documentElm: Document) =>\n  on(\n    scrollbar,\n    'mousedown',\n    on.bind(0, documentElm, 'click', stopPropagation, { _once: true, _capture: true }),\n    { _capture: true }\n  );\nconst releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\n\nconst createInteractiveScrollEvents = (\n  options: ReadonlyOptions,\n  hostElm: HTMLElement,\n  documentElm: Document,\n  scrollbarStructure: ScrollbarStructure,\n  scrollOffsetElement: HTMLElement,\n  structureSetupState: () => StructureSetupState,\n  isHorizontal?: boolean\n) => {\n  const { _rtlScrollBehavior } = getEnvironment();\n  const { _handle, _track, _scrollbar } = scrollbarStructure;\n  const scrollLeftTopKey = `scroll${isHorizontal ? 'Left' : 'Top'}`;\n  const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}`; // for pointer event (can't use xy because of IE11)\n  const widthHeightKey = isHorizontal ? 'width' : 'height';\n  const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\n  const whKey = isHorizontal ? 'w' : 'h';\n  const xyKey = isHorizontal ? 'x' : 'y';\n\n  const createRelativeHandleMove =\n    (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\n      const { _overflowAmount } = structureSetupState();\n      const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\n      const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\n      const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\n      const isRTL = directionIsRTL(_scrollbar);\n      const negateMultiplactor =\n        isRTL && isHorizontal ? (_rtlScrollBehavior.n || _rtlScrollBehavior.i ? 1 : -1) : 1;\n\n      scrollOffsetElement[scrollLeftTopKey] = mouseDownScroll + scrollDelta * negateMultiplactor;\n    };\n\n  return on(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\n    const isDragScroll =\n      closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\n    const pointerCaptureElement = isDragScroll ? _handle : _track;\n    attrClass(hostElm, dataAttributeHost, dataValueHostScrollbarPressed, true);\n\n    if (continuePointerDown(pointerDownEvent, options, isDragScroll)) {\n      const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\n      const getHandleRect = () => getBoundingClientRect(_handle);\n      const getTrackRect = () => getBoundingClientRect(_track);\n      const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\n        (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\n      const moveHandleRelative = createRelativeHandleMove(\n        scrollOffsetElement[scrollLeftTopKey] || 0,\n        1 / getScale(scrollOffsetElement)[xyKey]\n      );\n      const pointerDownOffset = pointerDownEvent[clientXYKey];\n      const handleRect = getHandleRect();\n      const trackRect = getTrackRect();\n      const handleLength = handleRect[widthHeightKey];\n      const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\n      const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\n      const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\n      const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        runEachAndClear(offFns);\n        pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\n      };\n\n      const offFns = [\n        attrClass.bind(0, hostElm, dataAttributeHost, dataValueHostScrollbarPressed),\n        on(documentElm, releasePointerCaptureEvents, releasePointerCapture),\n        on(documentElm, 'selectstart', (event: Event) => preventDefault(event), {\n          _passive: false,\n        }),\n        on(_track, releasePointerCaptureEvents, releasePointerCapture),\n        on(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\n          const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\n\n          if (isDragScroll || instantClickScroll) {\n            moveHandleRelative(startOffset + relativeMovement);\n          }\n        }),\n      ];\n\n      if (instantClickScroll) {\n        moveHandleRelative(startOffset);\n      } else if (!isDragScroll) {\n        const clickScrollPlugin = getPlugins()[clickScrollPluginName] as\n          | ClickScrollPluginInstance\n          | undefined;\n\n        if (clickScrollPlugin) {\n          push(\n            offFns,\n            clickScrollPlugin._(\n              moveHandleRelative,\n              getHandleOffset,\n              startOffset,\n              handleLength,\n              relativeTrackPointerOffset\n            )\n          );\n        }\n      }\n\n      pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\n    }\n  });\n};\n\nexport const createScrollbarsSetupEvents =\n  (\n    options: ReadonlyOptions,\n    structureSetupState: () => StructureSetupState\n  ): ScrollbarsSetupEvents =>\n  (\n    scrollbarStructure,\n    scrollbarsAddRemoveClass,\n    documentElm,\n    hostElm,\n    scrollOffsetElm,\n    isHorizontal\n  ) => {\n    const { _scrollbar } = scrollbarStructure;\n    const [wheelTimeout, clearScrollTimeout] = selfClearTimeout(333);\n    const scrollByFn = !!scrollOffsetElm.scrollBy;\n    let wheelScrollBy = true;\n\n    return runEachAndClear.bind(0, [\n      on(_scrollbar, 'pointerenter', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\n      }),\n      on(_scrollbar, 'pointerleave pointercancel', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction);\n      }),\n      on(\n        _scrollbar,\n        'wheel',\n        (wheelEvent: WheelEvent) => {\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\n\n          // the first wheel event is swallowed, simulate scroll to compensate for it\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === hostElm) {\n            scrollOffsetElm.scrollBy({\n              left: deltaX,\n              top: deltaY,\n              behavior: 'smooth',\n            });\n          }\n\n          wheelScrollBy = false;\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\n          wheelTimeout(() => {\n            wheelScrollBy = true;\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\n          });\n\n          preventDefault(wheelEvent);\n        },\n        { _passive: false, _capture: true }\n      ),\n      createRootClickStopPropagationEvents(_scrollbar, documentElm),\n      createInteractiveScrollEvents(\n        options,\n        hostElm,\n        documentElm,\n        scrollbarStructure,\n        scrollOffsetElm,\n        structureSetupState,\n        isHorizontal\n      ),\n      clearScrollTimeout,\n    ]);\n  };\n", "import { getBoundingClientRect } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { StructureSetupState } from '~/setups';\n\nconst { min, max, abs, round } = Math;\n\nexport const getScrollbarHandleLengthRatio = (\n  scrollbarHandle: HTMLElement,\n  scrollbarTrack: HTMLElement,\n  isHorizontal?: boolean,\n  structureSetupState?: StructureSetupState\n) => {\n  if (structureSetupState) {\n    const axis = isHorizontal ? 'x' : 'y';\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\n\n    const viewportSize = _overflowEdge[axis];\n    const overflowAmount = _overflowAmount[axis];\n    return max(0, min(1, viewportSize / (viewportSize + overflowAmount)));\n  }\n  const axis = isHorizontal ? 'width' : 'height';\n  const handleSize = getBoundingClientRect(scrollbarHandle)[axis];\n  const trackSize = getBoundingClientRect(scrollbarTrack)[axis];\n  return max(0, min(1, handleSize / trackSize));\n};\n\nexport const getScrollbarHandleOffsetRatio = (\n  scrollbarHandle: HTMLElement,\n  scrollbarTrack: HTMLElement,\n  scrollOffsetElement: HTMLElement,\n  structureSetupState: StructureSetupState,\n  isRTL: boolean,\n  isHorizontal?: boolean\n) => {\n  const { _rtlScrollBehavior } = getEnvironment();\n  const axis = isHorizontal ? 'x' : 'y';\n  const scrollLeftTop = isHorizontal ? 'Left' : 'Top';\n  const { _overflowAmount } = structureSetupState;\n  const scrollPositionMax = round(_overflowAmount[axis]);\n  const scrollPosition = abs(scrollOffsetElement[`scroll${scrollLeftTop}`]);\n  const handleRTL = isHorizontal && isRTL;\n  const rtlNormalizedScrollPosition = _rtlScrollBehavior.i\n    ? scrollPosition\n    : scrollPositionMax - scrollPosition;\n  const finalScrollPosition = handleRTL ? rtlNormalizedScrollPosition : scrollPosition;\n  const scrollPercent = min(1, finalScrollPosition / scrollPositionMax);\n  const lengthRatio = getScrollbarHandleLengthRatio(scrollbarHandle, scrollbarTrack, isHorizontal);\n\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\n};\n", "import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  directionIsRTL,\r\n  each,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  setT,\r\n  style,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetRatio,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.calculations';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from '~/setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _handleStyle: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: (structureSetupState: StructureSetupState) => void;\r\n  _refreshScrollbarsHandleOffset: (structureSetupState: StructureSetupState) => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => void,\r\n  destroy: () => void\r\n];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _documentElm,\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarsHandleStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      style(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? 'width' : 'height']: `${(\r\n            getScrollbarHandleLengthRatio(_handle, _track, isHorizontal, structureSetupState) * 100\r\n          ).toFixed(3)}%`,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    structureSetupState: StructureSetupState,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const translateAxis = isHorizontal ? 'X' : 'Y';\r\n    scrollbarsHandleStyle(scrollbarStructures, (structure) => {\r\n      const { _handle, _track, _scrollbar } = structure;\r\n      const offsetRatio = getScrollbarHandleOffsetRatio(\r\n        _handle,\r\n        _track,\r\n        _scrollOffsetElement,\r\n        structureSetupState,\r\n        directionIsRTL(_scrollbar),\r\n        isHorizontal\r\n      );\r\n      // eslint-disable-next-line no-self-compare\r\n      const validOffsetRatio = offsetRatio === offsetRatio; // is false when offset is NaN\r\n      return [\r\n        _handle,\r\n        {\r\n          transform: validOffsetRatio\r\n            ? `translate${translateAxis}(${(offsetRatio * 100).toFixed(3)}%)`\r\n            : '',\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars, structureSetupState);\r\n  };\r\n  const refreshScrollbarsHandleOffset = (structureSetupState: StructureSetupState) => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, structureSetupState, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars, structureSetupState);\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    appendChildren(scrollbar, track);\r\n    appendChildren(track, handle);\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      removeElements.bind(0, scrollbar),\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        _documentElm,\r\n        _host,\r\n        _scrollOffsetElement,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = generateScrollbarDOM.bind(0, true);\r\n  const generateVerticalScrollbarStructure = generateScrollbarDOM.bind(0, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _handleStyle: scrollbarsHandleStyle.bind(0, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n", "import { on, runEachAndClear, parent, scrollLeft, scrollTop, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport { createState, createOptionCheck } from '~/setups/setups';\r\nimport { createScrollbarsSetupEvents } from '~/setups/scrollbarsSetup/scrollbarsSetup.events';\r\nimport { createScrollbarsSetupElements } from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n} from '~/classnames';\r\nimport type {\r\n  ScrollbarsSetupElementsObj,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport type { StructureSetupUpdateHints } from '~/setups/structureSetup/structureSetup.update';\r\nimport type {\r\n  ReadonlyOptions,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { Setup, StructureSetupState, StructureSetupStaticState } from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { DeepPartial, OverflowStyle, StyleObject } from '~/typings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupStaticState {\r\n  _elements: ScrollbarsSetupElementsObj;\r\n  _appendElements: () => void;\r\n}\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  structureSetupState: (() => StructureSetupState) & StructureSetupStaticState,\r\n  onScroll: (event: Event) => void\r\n): Setup<\r\n  ScrollbarsSetupState,\r\n  ScrollbarsSetupStaticState,\r\n  [DeepPartial<StructureSetupUpdateHints>]\r\n> => {\r\n  let autoHideIsMove: boolean;\r\n  let autoHideIsLeave: boolean;\r\n  let autoHideNotNever: boolean;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let globalAutoHideDelay = 0;\r\n\r\n  const state = createState({});\r\n  const [getState] = state;\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => globalAutoHideDelay);\r\n  const [elements, appendElements, destroyElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupState._elements,\r\n    createScrollbarsSetupEvents(options, structureSetupState)\r\n  );\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _scrollEventElement,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n  } = structureSetupState._elements;\r\n  const {\r\n    _horizontal,\r\n    _vertical,\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n  } = elements;\r\n  const { _handleStyle: styleHorizontal } = _horizontal;\r\n  const { _handleStyle: styleVertical } = _vertical;\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = _viewportIsTarget && !_isBody && parent(_scrollbar) === _viewport && _scrollbar;\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? `translate(${scrollLeft(_scrollOffsetElement)}px, ${scrollTop(_scrollOffsetElement)}px)`\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHidden);\r\n    } else {\r\n      const hide = () => _scrollbarsAddRemoveClass(classNameScrollbarAutoHidden, true);\r\n      if (globalAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const onHostMouseEnter = () => {\r\n    mouseInHost = autoHideIsLeave;\r\n    mouseInHost && manageScrollbarsAutoHide(true);\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    destroyElements,\r\n\r\n    on(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    on(_host, 'pointerenter', onHostMouseEnter),\r\n    on(_host, 'pointerleave', () => {\r\n      mouseInHost = false;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n    }),\r\n    on(_host, 'pointermove', () => {\r\n      autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    on(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset(structureSetupState());\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _viewportIsTarget && styleHorizontal(styleScrollbarPosition);\r\n      _viewportIsTarget && styleVertical(styleScrollbarPosition);\r\n    }),\r\n  ];\r\n  const scrollbarsSetupState = getState.bind(0) as (() => ScrollbarsSetupState) &\r\n    ScrollbarsSetupStaticState;\r\n  scrollbarsSetupState._elements = elements;\r\n  scrollbarsSetupState._appendElements = appendElements;\r\n\r\n  return [\r\n    (changedOptions, force, structureUpdateHints) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _directionChanged,\r\n      } = structureUpdateHints;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const checkOption = createOptionCheck(options, changedOptions, force);\r\n      const currStructureSetupState = structureSetupState();\r\n      const { _overflowAmount, _overflowStyle, _directionIsRTL } = currStructureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        checkOption<boolean>('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = checkOption<string | null>('scrollbars.theme');\r\n      const [visibility, visibilityChanged] =\r\n        checkOption<ScrollbarsVisibilityBehavior>('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] =\r\n        checkOption<ScrollbarsAutoHideBehavior>('scrollbars.autoHide');\r\n      const [autoHideDelay] = checkOption<number>('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = checkOption<boolean>('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = checkOption<boolean>('scrollbars.clickScroll');\r\n\r\n      const updateHandle = _overflowEdgeChanged || _overflowAmountChanged || _directionChanged;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      globalAutoHideDelay = autoHideDelay;\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n      if (updateHandle) {\r\n        _refreshScrollbarsHandleLength(currStructureSetupState);\r\n        _refreshScrollbarsHandleOffset(currStructureSetupState);\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    scrollbarsSetupState,\r\n    runEachAndClear.bind(0, destroyFns),\r\n  ];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  each,\r\n  isFunction,\r\n  keys,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createStructureSetup, createScrollbarsSetup } from '~/setups';\r\nimport { getPlugins, addPlugin, optionsValidationPluginName } from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { Plugin, OptionsValidationPluginInstance, PluginInstance } from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds one or multiple plugins.\r\n   * @param plugin Either a signle or an array of plugins to add.\r\n   */\r\n  plugin(plugin: Plugin | Plugin[]): void;\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Returns the overlayscrollbars environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Get the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options.\r\n   * @param pure If true the new options will be merged with the current default options instead of the current options.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure If true all already added event listeners will be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds an event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes an event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance. */\r\n  destroy(): void;\r\n}\r\n\r\nconst invokePluginInstance = (\r\n  pluginInstance: PluginInstance,\r\n  staticObj?: OverlayScrollbarsStatic | false | null | undefined | 0,\r\n  instanceObj?: OverlayScrollbars | false | null | undefined | 0\r\n) => {\r\n  if (isFunction(pluginInstance)) {\r\n    pluginInstance(staticObj || undefined, instanceObj || undefined);\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions, _getDefaultInitialization, _addZoomListener, _addResizeListener } =\r\n    getEnvironment();\r\n  const plugins = getPlugins();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const optionsValidationPlugin = getPlugins()[\r\n        optionsValidationPluginName\r\n      ] as OptionsValidationPluginInstance;\r\n      const validate = optionsValidationPlugin && optionsValidationPlugin._;\r\n      return validate ? validate(newOptions, true) : newOptions;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addEvent, removeEvent, triggerEvent] = createEventListenerHub(eventListeners);\r\n    const [updateStructure, structureState, destroyStructure] = createStructureSetup(\r\n      target,\r\n      currentOptions\r\n    );\r\n    const [updateScrollbars, scrollbarsState, destroyScrollbars] = createScrollbarsSetup(\r\n      target,\r\n      currentOptions,\r\n      structureState,\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n    );\r\n    const update = (changedOptions: PartialOptions, force?: boolean): boolean =>\r\n      updateStructure(changedOptions, !!force);\r\n    const forceUpdate = update.bind(0, {}, true);\r\n    const removeZoomListener = _addZoomListener(forceUpdate);\r\n    const removeResizeListener = _addResizeListener(forceUpdate);\r\n    const destroy = (canceled?: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      removeZoomListener();\r\n      removeResizeListener();\r\n\r\n      destroyScrollbars();\r\n      destroyStructure();\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, !!canceled]);\r\n      removeEvent();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            update(changedOptions);\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeEvent(name, listener as any);\r\n      },\r\n      state() {\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _directionIsRTL,\r\n        } = structureState();\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = structureState._elements;\r\n        const { _horizontal, _vertical } = scrollbarsState._elements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              updateScrollbars({}, true, {});\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (force?: boolean) => update({}, force),\r\n      destroy: destroy.bind(0),\r\n    };\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force: boolean) => {\r\n      updateScrollbars(changedOptions, force, updateHints);\r\n    });\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    each(keys(plugins), (pluginName) => invokePluginInstance(plugins[pluginName], 0, instance));\r\n\r\n    if (\r\n      cancelInitialization(\r\n        structureState._elements._isBody,\r\n        _getDefaultInitialization().cancel,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    structureState._appendElements();\r\n    scrollbarsState._appendElements();\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    structureState._addOnUpdatedListener((updateHints, changedOptions, force) => {\r\n      const {\r\n        _sizeChanged,\r\n        _directionChanged,\r\n        _heightIntrinsicChanged,\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _contentMutation,\r\n        _hostMutation,\r\n      } = updateHints;\r\n\r\n      triggerEvent('updated', [\r\n        instance,\r\n        {\r\n          updateHints: {\r\n            sizeChanged: _sizeChanged,\r\n            directionChanged: _directionChanged,\r\n            heightIntrinsicChanged: _heightIntrinsicChanged,\r\n            overflowEdgeChanged: _overflowEdgeChanged,\r\n            overflowAmountChanged: _overflowAmountChanged,\r\n            overflowStyleChanged: _overflowStyleChanged,\r\n            contentMutation: _contentMutation,\r\n            hostMutation: _hostMutation,\r\n          },\r\n          changedOptions,\r\n          force,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  each(addPlugin(plugins), (pluginInstance) =>\r\n    invokePluginInstance(pluginInstance, OverlayScrollbars)\r\n  );\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": ["each", "source", "callback", "isArrayLike", "i", "length", "Object", "keys", "key", "style", "elm", "styles", "getSingleStyle", "isString", "getStyles", "isArray", "getStylesResult", "computedStyle", "window", "getComputedStyle", "getCSSVal", "reduce", "result", "setCSSVal", "createCache", "options", "update", "o", "_initialValue", "u", "_equal", "_", "_alwaysUpdateValues", "_value", "_previous", "cacheUpdateContextual", "newValue", "force", "curr", "newVal", "changed", "cacheUpdateIsolated", "getCurrentCache", "isClient", "ElementNodeType", "Node", "ELEMENT_NODE", "toString", "hasOwnProperty", "prototype", "isUndefined", "obj", "isNull", "type", "call", "replace", "toLowerCase", "isNumber", "isBoolean", "isFunction", "Array", "isObject", "lengthCorrectFormat", "isPlainObject", "cstr", "ctor", "ctorProto", "hasOwnConstructor", "hasIsPrototypeOf", "isHTMLElement", "instanceofObj", "HTMLElement", "nodeType", "isElement", "Element", "indexOf", "arr", "item", "fromIndex", "push", "array", "items", "arrayIsSingleItem", "apply", "from", "original", "Set", "forEach", "value", "isEmptyArray", "runEachAndClear", "args", "keep", "runFn", "fn", "prop", "assignDeep", "target", "object1", "object2", "object3", "object4", "object5", "object6", "sources", "copy", "copyIsArray", "src", "clone", "isEmptyObject", "name", "getSetProp", "topLeft", "fallback", "attr", "attrName", "getAttribute", "setAttribute", "removeAttr", "removeAttribute", "attrClass", "add", "currValues", "currValuesSet", "split", "newTokens", "join", "trim", "hasAttrClass", "has", "scrollLeft", "scrollTop", "getElmPrototype", "find", "selector", "rootElm", "document", "querySelectorAll", "findFirst", "querySelector", "is", "matches", "msMatchesSelector", "contents", "childNodes", "parent", "parentElement", "closest", "closestFn", "liesBetween", "highBoundarySelector", "deepBoundarySelector", "closestHighBoundaryElm", "closestDeepBoundaryElm", "deepBoundaryIsValid", "before", "parentElm", "preferredAnchor", "insertedElms", "anchor", "fragment", "createDocumentFragment", "insertedElm", "previousSibling", "appendChild", "firstChild", "nextSibling", "insertBefore", "appendChildren", "node", "children", "insertedNodes", "insertAfter", "removeElements", "nodes", "e", "removeChild", "createDiv", "classNames", "div", "createElement", "createDOM", "html", "createdDiv", "innerHTML", "firstLetterToUpper", "str", "charAt", "toUpperCase", "slice", "getDummyStyle", "cssPrefixes", "jsPrefixes", "jsCache", "cssCache", "cssProperty", "uppercasedName", "elmStyle", "prefix", "prefixWithoutDashes", "resultPossibilities", "resultPossibility", "jsAPI", "MutationObserverConstructor", "IntersectionObserverConstructor", "ResizeObserverConstructor", "cAF", "rAF", "setT", "setTimeout", "clearT", "clearTimeout", "rnothtmlwhite", "classListAction", "className", "action", "classList", "clazz", "classes", "match", "removeClass", "remove", "addClass", "bind", "max", "Math", "animationCurrentTime", "performance", "now", "animateNumber", "to", "duration", "onFrame", "easing", "animationFrameId", "timeStart", "finalDuration", "frame", "complete", "timeNow", "timeElapsed", "stopAnimation", "percent", "progress", "animationCompleted", "equal", "a", "b", "props", "propMutation", "compareA", "compareB", "equalWH", "equalXY", "equalTRBL", "equalBCRWH", "round", "noop", "selfClearTimeout", "timeout", "id", "setTFn", "clearTFn", "debounce", "functionToDebounce", "maxTimeoutId", "prevArguments", "latestArguments", "clear", "v", "_timeout", "g", "_maxDelay", "p", "_mergeParams", "invokeFunctionToDebounce", "undefined", "this", "mergeParms", "flush", "debouncedFn", "arguments", "finalTimeout", "hasTimeout", "finalMaxWait", "hasMaxWait", "setTimeoutFn", "clearTimeoutFn", "mergeParamsResult", "invokedArgs", "boundInvoke", "timeoutId", "_flush", "cssNumber", "opacity", "zindex", "parseToZeroOrNumber", "toFloat", "num", "parseFloat", "parseInt", "adaptCSSVal", "val", "getPropertyValue", "setProperty", "directionIsRTL", "topRightBottomLeft", "propertyPrefix", "propertySuffix", "finalPrefix", "finalSuffix", "top", "right", "bottom", "left", "t", "r", "l", "zeroObj", "w", "h", "windowSize", "innerWidth", "innerHeight", "offsetSize", "offsetWidth", "offsetHeight", "clientSize", "clientWidth", "clientHeight", "scrollSize", "scrollWidth", "scrollHeight", "fractionalSize", "cssHeight", "cssWidth", "getBoundingClientRect", "passiveEventsSupport", "supportPassiveEvents", "addEventListener", "defineProperty", "get", "splitEventNames", "eventNames", "off", "listener", "capture", "eventName", "removeEventListener", "on", "_ref", "doSupportPassiveEvents", "passive", "_passive", "_capture", "once", "_once", "offListeners", "nativeOptions", "finalListener", "evt", "stopPropagation", "preventDefault", "x", "y", "absoluteCoordinates", "rect", "pageYOffset", "pageXOffset", "manageListener", "createEventListenerHub", "initialEventListeners", "events", "Map", "removeEvent", "eventSet", "currListener", "addEvent", "nameOrEventListeners", "listenerOrPure", "set", "eventListenerKeys", "offFns", "eventListener", "triggerEvent", "event", "opsStringify", "JSON", "stringify", "Error", "defaultOptions", "paddingAbsolute", "showNativeOverlaidScrollbars", "elementEvents", "attributes", "ignoreMutation", "overflow", "scrollbars", "theme", "visibility", "autoHide", "autoHideDelay", "dragScroll", "clickScroll", "pointers", "getOptionsDiff", "currOptions", "newOptions", "diff", "optionsKeys", "concat", "optionKey", "currOptionValue", "newOptionValue", "isDiff", "classNameEnvironment", "classNameEnvironmentFlexboxGlue", "classNameEnvironmentFlexboxGlueMax", "classNameScrollbarHidden", "dataAttributeInitialize", "dataAttributeHost", "dataAttributeHostOverflowX", "dataAttributeHostOverflowY", "dataValueHostOverflowVisible", "dataValueHostScrollbarHidden", "dataValueHostScrollbarPressed", "dataValueHostUpdating", "dataAttributeViewport", "dataValueViewportArrange", "dataValueViewportScrollbarHidden", "dataValueViewportOverflowVisible", "dataAttributePadding", "dataValuePaddingOverflowVisible", "dataAttributeContent", "classNameSizeObserver", "classNameSizeObserverAppear", "classNameSizeObserverListener", "classNameSizeObserverListenerScroll", "classNameSizeObserverListenerItem", "classNameSizeObserverListenerItemFinal", "classNameTrinsicObserver", "classNameScrollbarNoCssCustomProps", "classNameScrollbarThemeNone", "classNameScrollbar", "classNameScrollbarRtl", "classNameScrollbarHorizontal", "classNameScrollbarVertical", "classNameScrollbarTrack", "classNameScrollbarHandle", "classNameScrollbarVisible", "classNameScrollbarCornerless", "classNameScrollbarTransitionless", "classNameScrollbarInteraction", "classNameScrollbarUnusable", "classNameScrollbarAutoHidden", "classNameScrollbarWheel", "classNameScrollbarTrackInteractive", "classNameScrollbarHandleInteractive", "pluginRegistry", "getPlugins", "addPlugin", "addedPlugin", "plugin", "pluginNameKeys", "optionsTemplateTypes", "boolean", "number", "string", "object", "function", "null", "numberAllowedValues", "oTypes", "booleanAllowedValues", "arrayNullValues", "overflowAllowedValues", "scrollbarsVisibilityAllowedValues", "scrollbarsAutoHideAllowedValues", "optionsValidationPluginName", "scrollAmount", "scrollEventName", "sizeObserverPluginName", "SizeObserverPlugin", "listenerElement", "onSizeChangedCallback", "observeAppearChange", "observerElementChildren", "observerElementChildrenRoot", "shrinkElement", "lastChild", "expandElement", "expandElementChild", "cacheSize", "currSize", "isDirty", "rAFId", "reset", "onResized", "appear", "onScroll", "scrollEvent", "width", "height", "contentArrangeCounter", "abs", "getWindowDPR", "dDPI", "screen", "deviceXDPI", "sDPI", "logicalXDPI", "devicePixelRatio", "diffBiggerThanOne", "valOne", "valTwo", "absValOne", "absValTwo", "scrollbarsHidingPluginName", "ScrollbarsHidingPlugin", "_createUniqueViewportArrangeElement", "env", "I", "_nativeScrollbarsHiding", "A", "_nativeScrollbarsOverlaid", "L", "_cssCustomProperties", "create", "_overflowUpdateSegment", "doViewportArrange", "flexboxGlue", "viewport", "viewportArrange", "getState", "getViewportOverflowState", "hideNativeScrollbars", "arrangeViewport", "viewportOverflowState", "viewportScrollSize", "sizeFraction", "P", "_viewportPaddingStyle", "D", "_scrollbarsHideOffset", "M", "_scrollbarsHideOffsetArrange", "arrangeX", "arrangeY", "hideOffsetX", "hideOffsetY", "viewportArrangeHorizontalPaddingKey", "viewportArrangeHorizontalPaddingValue", "viewportArrangeVerticalPaddingValue", "paddingTop", "fractionalContentWidth", "fractionalContenHeight", "arrangeSize", "sheet", "cssRules", "insertRule", "ruleStyle", "undoViewportArrange", "finalViewportOverflowState", "viewportPaddingStyle", "finalPaddingStyle", "assignProps", "prevStyle", "_envWindowZoom", "size", "dpr", "envInstance", "updateNativeScrollbarSizeCache", "sizeNew", "deltaSize", "deltaAbsSize", "deltaAbsRatio", "dprNew", "deltaIsBigger", "difference", "dprChanged", "isZoom", "scrollbarSize", "scrollbarSizeChanged", "_nativeScrollbarsSize", "clickScrollPluginName", "ClickScrollPlugin", "moveHandleRelative", "getHandleOffset", "startOffset", "handleLength", "relativeTrackPointerOffset", "iteration", "animateClickScroll", "clickScrollProgress", "sign", "animationProgress", "handleStartBound", "handleEndBound", "mouseBetweenHandleBounds", "firstIterationPauseTimeout", "environmentInstance", "getNativeScrollbarSize", "body", "measureElm", "measureElmChild", "cSize", "oSize", "fSize", "getNativeScrollbarsHiding", "testElm", "revertClass", "ex", "getRtlScrollBehavior", "childElm", "strHidden", "overflowX", "overflowY", "direction", "parentOffset", "childOffset", "childOffsetAfterScroll", "n", "getFlexboxGlue", "revertFbxGlue", "minOffsetsizeParent", "minOffsetsize", "supportsMin", "revertFbxGlueMax", "maxOffsetsizeParent", "maxOffsetsize", "supportsMax", "createEnvironment", "envDOM", "envElm", "envChildElm", "getNativeScrollbarSizeCache", "nativeScrollbarsSize", "nativeScrollbarsHiding", "nativeScrollbarsOverlaid", "staticDefaultInitialization", "elements", "host", "padding", "ownerDocument", "content", "slot", "cancel", "staticDefaultOptions", "getDefaultOptions", "getDefaultInitialization", "_rtlScrollBehavior", "_flexboxGlue", "_addZoomListener", "_addResizeListener", "_getDefaultInitialization", "_setDefaultInitialization", "newInitializationStrategy", "_getDefaultOptions", "_setDefaultOptions", "newDefaultOptions", "_staticDefaultInitialization", "_staticDefaultOptions", "windowAddEventListener", "debouncedWindowResize", "zoom", "resizeFn", "scrollbarsHidingPlugin", "getEnvironment", "resolveInitialization", "staticInitializationElement", "fallbackStaticInitializationElement", "defaultStaticInitializationElement", "staticInitializationElementValue", "staticInitialization", "resolvedInitialization", "dynamicInitializationElement", "fallbackDynamicInitializationElement", "defaultDynamicInitializationElement", "dynamicInitializationElementValue", "dynamicInitialization", "cancelInitialization", "isBody", "defaultCancelInitialization", "cancelInitializationValue", "defaultNativeScrollbarsOverlaid", "defaultbody", "resolvedNativeScrollbarsOverlaid", "resolvedDocumentScrollingElement", "finalNativeScrollbarsOverlaid", "finalDocumentScrollingElement", "targetInstanceMap", "WeakMap", "addInstance", "osInstance", "removeInstance", "delete", "getInstance", "getPropByPath", "path", "createOptionCheck", "changedOptions", "createState", "initialState", "state", "newState", "tabIndexStr", "createNewDiv", "unwrap", "createStructureSetupElements", "N", "createUniqueViewportArrangeElement", "defaultInitElements", "defaultHostInitialization", "defaultPaddingInitialization", "defaultViewportInitialization", "defaultContentInitialization", "targetIsElm", "targetStructureInitialization", "initElements", "hostInitialization", "paddingInitialization", "viewportInitialization", "contentInitialization", "targetElement", "isTextarea", "docElement", "documentElement", "wnd", "defaultView", "generalStaticInitializationElement", "generalDynamicInitializationElement", "generalResolveInitialization", "generateViewportElement", "generateContentElement", "possibleViewportElement", "viewportIsTarget", "viewportIsTargetBody", "possibleContentElement", "viewportIsContent", "defaultContentElementPresent", "viewportIstContentViewport", "viewportIsContentContent", "nonBodyViewportElement", "viewportElement", "nonBodyHostElement", "hostElement", "contentElement", "activeElm", "activeElement", "setViewportFocus", "evaluatedTargetObj", "_target", "_host", "_viewport", "_padding", "_content", "_viewportArrange", "_scrollOffsetElement", "_scrollEventElement", "_windowElm", "_documentElm", "_isTextarea", "_isBody", "_targetIsElm", "_viewportIsTarget", "_viewportIsContent", "_viewportHasClass", "viewportAttributeClassName", "hostAttributeClassName", "_viewportAddRemoveClass", "generatedElements", "elementIsGenerated", "W", "Z", "K", "J", "tt", "nt", "destroyFns", "isTextareaHostGenerated", "targetContents", "contentSlot", "appendElements", "removeHtmlClass", "ogTabindex", "focus", "revertViewportTabIndex", "createTrinsicUpdateSegment", "structureSetupElements", "updateHints", "V", "ht", "_heightIntrinsic", "vt", "_heightIntrinsicChanged", "heightIntrinsicChanged", "_sizeChanged", "_contentMutation", "createPaddingUpdateSegment", "setState", "_isSingleElm", "updatePaddingCache", "currentPaddingCache", "checkOption", "paddingChanged", "_nativeScrollbarStyling", "bt", "_directionIsRTL", "gt", "wt", "yt", "_directionChanged", "paddingAbsoluteChanged", "contentMutation", "paddingStyleChanged", "paddingRelative", "paddingHorizontal", "paddingVertical", "paddingStyle", "marginRight", "marginBottom", "marginLeft", "viewportStyle", "paddingRight", "paddingBottom", "paddingLeft", "_paddingAbsolute", "_paddingStyleChanged", "max0", "strVisible", "overlaidScrollbarsHideOffset", "whCacheOptions", "xyCacheOptions", "getOverflowAmount", "viewportClientSize", "tollerance", "amount", "overflowIsVisible", "overflowBehavior", "createOverflowUpdateSegment", "ut", "_t", "it", "et", "k", "updateSizeFraction", "getCurrentSizeFraction", "updateViewportScrollSizeCache", "getCurrentViewportScrollSizeCache", "updateOverflowAmountCache", "getCurrentOverflowAmountCache", "updateOverflowEdge", "getCurrentOverflowEdgeCache", "updateOverflowStyleCache", "fixFlexboxGlue", "heightIntrinsic", "St", "$t", "_overflowScroll", "hostClientSize", "isContentBox", "subtractXScrollbar", "viewportStyleObj", "arrangeHideOffset", "getStatePerAxis", "styleKey", "isOverlaid", "nativeScrollbarSize", "overflowStyle", "objectPrefferedOverflowStyle", "overflowScroll", "nonScrollbarStylingHideOffset", "scrollbarsHideOffset", "scrollbarsHideOffsetArrange", "xOverflowStyle", "xOverflowScroll", "xScrollbarsHideOffset", "xScrollbarsHideOffsetArrange", "yOverflowStyle", "yOverflowScroll", "yScrollbarsHideOffset", "yScrollbarsHideOffsetArrange", "_overflowStyle", "setViewportOverflowState", "hasOverflow", "overflowOption", "setAxisOverflowStyle", "behavior", "hasOverflowAxis", "overflowVisible", "overflowVisibleBehavior", "visibleBehaviorX", "visibleBehaviorY", "horizontalMarginKey", "viewportHorizontalPaddingKey", "horizontalMarginValue", "verticalMarginValue", "horizontalPaddingValue", "verticalPaddingValue", "Ot", "_hostMutation", "xt", "showNativeOverlaidScrollbarsOption", "showNativeOverlaidScrollbarsChanged", "overflowChanged", "adjustFlexboxGlue", "overflowXVisible", "overflowYVisible", "sizeFractionCache", "viewportScrollSizeCache", "overflowAmuntCache", "overflowEdgeCache", "preMeasureViewportOverflowState", "redoViewportArrange", "undoViewportArrangeOverflowState", "sizeFractionChanged", "viewportScrollSizeChanged", "viewportclientSize", "arrangedViewportScrollSize", "arrangedViewportClientSize", "overflowAmountScrollSize", "overflowAmountClientSize", "overflowEdge", "overflowEdgeChanged", "overflowAmount", "overflowAmountChanged", "removeClipping", "viewportArranged", "overflowStyleChanged", "_overflowEdge", "_overflowAmount", "_hasOverflow", "_overflowStyleChanged", "_overflowEdgeChanged", "_overflowAmountChanged", "prepareUpdateHints", "leading", "adaptive", "finalAdaptive", "objKeys", "leadingValue", "adaptiveValue", "createStructureSetupUpdate", "updateSegments", "initialUpdateHints", "adjustScrollOffset", "scrollOffsetX", "scrollOffsetY", "adaptivedUpdateHints", "updateSegment", "createEventContentChange", "eventContentChange", "map", "destroyed", "destroy", "updateElements", "getElements", "eventElmList", "entries", "isTargetChild", "contains", "createDOMObserver", "isContentObserver", "isConnected", "Ht", "_attributes", "Pt", "_styleChangingAttributes", "Dt", "_eventContentChange", "Mt", "_nestedTargetSelector", "Rt", "_ignoreTargetChange", "kt", "_ignoreContentChange", "debouncedEventContentChange", "destroyEventContentChange", "updateEventContentChangeElements", "finalAttributes", "finalStyleChangingAttributes", "observedAttributes", "observerCallback", "mutations", "fromRecords", "ignoreTargetChange", "ignoreContentChange", "totalChangedNodes", "targetChangedAttrs", "targetStyleChanged", "contentChanged", "mutation", "attributeName", "mutationTarget", "oldValue", "addedNodes", "removedNodes", "isAttributesType", "isChildListType", "targetIsMutationTarget", "attributeValue", "attributeChanged", "styleChangingAttrChanged", "notOnlyAttrChanged", "contentAttrChanged", "isNestedTarget", "baseAssertion", "contentFinalChanged", "mutationObserver", "observe", "attributeOldValue", "attributeFilter", "subtree", "childList", "characterData", "disconnect", "records", "takeRecords", "domRectHasDimensions", "createSizeObserver", "_direction", "observeDirectionChange", "_appear", "sizeObserverPlugin", "rtlScrollBehavior", "baseElements", "sizeObserver", "getIsDirectionRTL", "updateResizeObserverContentRectCache", "currVal", "onSizeChangedCallbackProxy", "sizeChangedContext", "isResizeObserverCall", "hasDirectionCache", "skip", "doDirectionScroll", "currRContentRect", "prevContentRect", "pop", "contentRect", "hasDimensions", "hadDimensions", "rtl", "_directionIsRTLCache", "appearCallback", "resizeObserverInstance", "pluginAppearCallback", "pluginOffListeners", "updateDirectionIsRTLCache", "directionIsRTLCacheValues", "directionIsRTLCache", "directionIsRTLCacheChanged", "directionIsRTLCachePrevious", "isHeightIntrinsic", "ioEntryOrSize", "isIntersecting", "intersectionRatio", "createTrinsicObserver", "onTrinsicChangedCallback", "intersectionObserverInstance", "trinsicObserver", "updateHeightIntrinsicCache", "triggerOnTrinsicChangedCallback", "updateValue", "intersectionObserverCallback", "root", "onSizeChanged", "newSize", "destroySizeObserver", "appendSizeObserver", "hostSelector", "viewportSelector", "viewportAttrsFromTarget", "baseStyleChangingAttrsTextarea", "baseStyleChangingAttrs", "createStructureSetupObservers", "structureSetupUpdate", "debounceTimeout", "debounceMaxDelay", "contentMutationObserver", "rt", "ft", "updateContentSizeCache", "hasOver", "hasVpStyle", "contentScroll", "viewportScroll", "fractional", "contentMutationObserverAttr", "structureSetupUpdateWithDebouncedAdaptiveUpdateHints", "prev", "prevObj", "currObj", "updateViewportAttrsFromHost", "attribute", "hostAttr", "onTrinsicChanged", "heightIntrinsicCache", "updateFn", "directionChanged", "directionIsRTLChanged", "onContentMutation", "contentChangedThroughEvent", "contentSizeChanged", "onHostMutation", "destroyTrinsicObserver", "appendTrinsicObserver", "updateTrinsicObserver", "destroyHostMutationObserver", "updateHostMutationObserver", "viewportIsTargetResizeObserver", "hostUpdateResult", "trinsicUpdateResult", "contentUpdateResult", "attributesChanged", "elementEventsChanged", "debounceValue", "debounceChanged", "updateContentMutationObserver", "ignoreMutationFromOptions", "ignore", "maxWait", "initialXYNumber", "createInitialStructureSetupUpdateState", "createStructureSetup", "checkOptionsFallback", "appendStructureElements", "destroyElements", "updateStructure", "triggerUpdateEvent", "truthyUpdateHints", "some", "destroyObservers", "appendObserverElements", "updateObservers", "updateObserversOptions", "structureSetupState", "_addOnUpdatedListener", "_appendElements", "initialScrollLeft", "initialScrollTop", "_elements", "getScale", "element", "continuePointerDown", "isDragScroll", "scrollbarOptions", "button", "isPrimary", "pointerType", "includes", "createRootClickStopPropagationEvents", "scrollbar", "documentElm", "releasePointerCaptureEvents", "createInteractiveScrollEvents", "hostElm", "scrollbarStructure", "scrollOffsetElement", "isHorizontal", "B", "Ft", "_handle", "Gt", "_track", "Xt", "_scrollbar", "scrollLeftTopKey", "clientXYKey", "widthHeightKey", "leftTopKey", "whKey", "xyKey", "createRelativeHandleMove", "mouseDownScroll", "invertedScale", "deltaMovement", "Tt", "handleTrackDiff", "scrollDeltaPercent", "scrollDelta", "isRTL", "negateMultiplactor", "pointerDownEvent", "pointerCaptureElement", "instantClickScroll", "shiftKey", "getHandleRect", "getTrackRect", "handleRect", "trackRect", "pointerDownOffset", "handleCenter", "releasePointerCapture", "pointerUpEvent", "pointerId", "pointerMoveEvent", "relativeMovement", "clickScrollPlugin", "setPointerCapture", "createScrollbarsSetupEvents", "scrollbarsAddRemoveClass", "scrollOffsetElm", "wheelTimeout", "clearScrollTimeout", "scrollByFn", "scrollBy", "wheelScrollBy", "wheelEvent", "deltaX", "deltaY", "deltaMode", "min", "getScrollbarHandleLengthRatio", "scrollbarHandle", "scrollbarTrack", "axis", "zt", "viewportSize", "handleSize", "trackSize", "getScrollbarHandleOffsetRatio", "scrollLeftTop", "scrollPositionMax", "scrollPosition", "handleRTL", "rtlNormalizedScrollPosition", "finalScrollPosition", "scrollPercent", "lengthRatio", "createScrollbarsSetupElements", "scrollbarsSetupEvents", "defaultInitScrollbars", "defaultInitScrollbarsSlot", "ct", "lt", "ot", "scrollbarsInit", "initScrollbarsSlot", "evaluatedScrollbarSlot", "scrollbarStructureAddRemoveClass", "scrollbarStructures", "scrollbarsHandleStyle", "scrollbarStructureRefreshHandleLength", "structure", "toFixed", "scrollbarStructureRefreshHandleOffset", "translateAxis", "offsetRatio", "validOffsetRatio", "transform", "horizontalScrollbars", "verticalScrollbars", "onlyHorizontal", "singleAxis", "runHorizontal", "runVertical", "refreshScrollbarsHandleLength", "refreshScrollbarsHandleOffset", "generateScrollbarDOM", "scrollbarClassName", "arrToPush", "transitionlessClass", "track", "handle", "generateHorizontalScrollbarStructure", "generateVerticalScrollbarStructure", "_refreshScrollbarsHandleLength", "_refreshScrollbarsHandleOffset", "_scrollbarsAddRemoveClass", "_horizontal", "_scrollbarStructures", "_clone", "_handleStyle", "_vertical", "createScrollbarsSetup", "autoHideIsMove", "autoHideIsLeave", "autoHideNotNever", "mouseInHost", "prevTheme", "globalAutoHideDelay", "requestMouseMoveAnimationFrame", "cancelMouseMoveAnimationFrame", "requestScrollAnimationFrame", "cancelScrollAnimationFrame", "scrollTimeout", "auotHideMoveTimeout", "clearAutoHideTimeout", "auotHideTimeout", "clearAutoTimeout", "st", "Jt", "nn", "Zt", "Ut", "Wt", "styleHorizontal", "styleVertical", "styleScrollbarPosition", "manageScrollbarsAutoHide", "removeAutoHide", "delayless", "hide", "onHostMouseEnter", "scrollbarsSetupState", "structureUpdateHints", "At", "Lt", "It", "currStructureSetupState", "Ct", "themeChanged", "visibilityChanged", "autoHideChanged", "dragScrollChanged", "clickScrollChanged", "updateHandle", "updateVisibility", "setScrollbarVisibility", "isVisible", "xVisible", "yVisible", "hasCorner", "invokePluginInstance", "pluginInstance", "staticObj", "instanceObj", "OverlayScrollbars", "eventListeners", "F", "Y", "j", "plugins", "targetIsElement", "instanceTarget", "potentialInstance", "validateOptions", "optionsValidationPlugin", "validate", "currentOptions", "structureState", "destroyStructure", "updateScrollbars", "scrollbarsState", "destroyScrollbars", "instance", "forceUpdate", "removeZoomListener", "removeResizeListener", "canceled", "pure", "base", "Et", "directionRTL", "translateScrollbarStructure", "translateScrollbarsSetupElement", "scrollbarsSetupElement", "Kt", "Qt", "translatedStructure", "scrollEventElement", "scrollbarHorizontal", "scrollbarVertical", "pluginName", "sizeChanged", "hostMutation", "valid", "hasElmsFn", "X", "U", "q", "G", "scrollbarsSize", "scrollbarsOverlaid", "scrollbarsHiding", "cssCustomProperties", "setDefaultInitialization", "setDefaultOptions"]
}
